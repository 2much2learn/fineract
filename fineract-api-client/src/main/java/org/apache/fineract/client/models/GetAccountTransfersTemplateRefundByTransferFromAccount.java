/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.apache.fineract.client.models.GetAccountTransfersTemplateRefundByTransferCurrency;
/**
 * GetAccountTransfersTemplateRefundByTransferFromAccount
 */


public class GetAccountTransfersTemplateRefundByTransferFromAccount {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("accountNo")
  private Long accountNo = null;

  @SerializedName("clientId")
  private Integer clientId = null;

  @SerializedName("clientName")
  private String clientName = null;

  @SerializedName("productId")
  private Integer productId = null;

  @SerializedName("productName")
  private String productName = null;

  @SerializedName("fieldOfficerId")
  private Integer fieldOfficerId = null;

  @SerializedName("currency")
  private GetAccountTransfersTemplateRefundByTransferCurrency currency = null;

  @SerializedName("amtForTransfer")
  private Float amtForTransfer = null;

  public GetAccountTransfersTemplateRefundByTransferFromAccount id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(example = "2", description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount accountNo(Long accountNo) {
    this.accountNo = accountNo;
    return this;
  }

   /**
   * Get accountNo
   * @return accountNo
  **/
  @Schema(example = "2", description = "")
  public Long getAccountNo() {
    return accountNo;
  }

  public void setAccountNo(Long accountNo) {
    this.accountNo = accountNo;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount clientId(Integer clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(example = "1", description = "")
  public Integer getClientId() {
    return clientId;
  }

  public void setClientId(Integer clientId) {
    this.clientId = clientId;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

   /**
   * Get clientName
   * @return clientName
  **/
  @Schema(example = "Daniel Owusu", description = "")
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount productId(Integer productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @Schema(example = "1", description = "")
  public Integer getProductId() {
    return productId;
  }

  public void setProductId(Integer productId) {
    this.productId = productId;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount productName(String productName) {
    this.productName = productName;
    return this;
  }

   /**
   * Get productName
   * @return productName
  **/
  @Schema(example = "CTRL", description = "")
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount fieldOfficerId(Integer fieldOfficerId) {
    this.fieldOfficerId = fieldOfficerId;
    return this;
  }

   /**
   * Get fieldOfficerId
   * @return fieldOfficerId
  **/
  @Schema(example = "0", description = "")
  public Integer getFieldOfficerId() {
    return fieldOfficerId;
  }

  public void setFieldOfficerId(Integer fieldOfficerId) {
    this.fieldOfficerId = fieldOfficerId;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount currency(GetAccountTransfersTemplateRefundByTransferCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(description = "")
  public GetAccountTransfersTemplateRefundByTransferCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(GetAccountTransfersTemplateRefundByTransferCurrency currency) {
    this.currency = currency;
  }

  public GetAccountTransfersTemplateRefundByTransferFromAccount amtForTransfer(Float amtForTransfer) {
    this.amtForTransfer = amtForTransfer;
    return this;
  }

   /**
   * Get amtForTransfer
   * @return amtForTransfer
  **/
  @Schema(example = "130", description = "")
  public Float getAmtForTransfer() {
    return amtForTransfer;
  }

  public void setAmtForTransfer(Float amtForTransfer) {
    this.amtForTransfer = amtForTransfer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountTransfersTemplateRefundByTransferFromAccount getAccountTransfersTemplateRefundByTransferFromAccount = (GetAccountTransfersTemplateRefundByTransferFromAccount) o;
    return Objects.equals(this.id, getAccountTransfersTemplateRefundByTransferFromAccount.id) &&
        Objects.equals(this.accountNo, getAccountTransfersTemplateRefundByTransferFromAccount.accountNo) &&
        Objects.equals(this.clientId, getAccountTransfersTemplateRefundByTransferFromAccount.clientId) &&
        Objects.equals(this.clientName, getAccountTransfersTemplateRefundByTransferFromAccount.clientName) &&
        Objects.equals(this.productId, getAccountTransfersTemplateRefundByTransferFromAccount.productId) &&
        Objects.equals(this.productName, getAccountTransfersTemplateRefundByTransferFromAccount.productName) &&
        Objects.equals(this.fieldOfficerId, getAccountTransfersTemplateRefundByTransferFromAccount.fieldOfficerId) &&
        Objects.equals(this.currency, getAccountTransfersTemplateRefundByTransferFromAccount.currency) &&
        Objects.equals(this.amtForTransfer, getAccountTransfersTemplateRefundByTransferFromAccount.amtForTransfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountNo, clientId, clientName, productId, productName, fieldOfficerId, currency, amtForTransfer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountTransfersTemplateRefundByTransferFromAccount {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountNo: ").append(toIndentedString(accountNo)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    fieldOfficerId: ").append(toIndentedString(fieldOfficerId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amtForTransfer: ").append(toIndentedString(amtForTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
