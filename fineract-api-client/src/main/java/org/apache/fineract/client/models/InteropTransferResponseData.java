/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.fineract.client.models.ExtensionData;
/**
 * InteropTransferResponseData
 */


public class InteropTransferResponseData {
  @SerializedName("officeId")
  private Long officeId = null;

  @SerializedName("groupId")
  private Long groupId = null;

  @SerializedName("clientId")
  private Long clientId = null;

  @SerializedName("loanId")
  private Long loanId = null;

  @SerializedName("savingsId")
  private Long savingsId = null;

  @SerializedName("subResourceId")
  private Long subResourceId = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("changes")
  private Map<String, Object> changes = null;

  @SerializedName("productId")
  private Long productId = null;

  @SerializedName("gsimId")
  private Long gsimId = null;

  @SerializedName("glimId")
  private Long glimId = null;

  @SerializedName("rollbackTransaction")
  private Boolean rollbackTransaction = null;

  @SerializedName("transactionCode")
  private String transactionCode = null;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACCEPTED("ACCEPTED"),
    REJECTED("REJECTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("expiration")
  private String expiration = null;

  @SerializedName("extensionList")
  private List<ExtensionData> extensionList = null;

  @SerializedName("transferCode")
  private String transferCode = null;

  @SerializedName("completedTimestamp")
  private String completedTimestamp = null;

  public InteropTransferResponseData officeId(Long officeId) {
    this.officeId = officeId;
    return this;
  }

   /**
   * Get officeId
   * @return officeId
  **/
  @Schema(description = "")
  public Long getOfficeId() {
    return officeId;
  }

  public void setOfficeId(Long officeId) {
    this.officeId = officeId;
  }

  public InteropTransferResponseData groupId(Long groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @Schema(description = "")
  public Long getGroupId() {
    return groupId;
  }

  public void setGroupId(Long groupId) {
    this.groupId = groupId;
  }

  public InteropTransferResponseData clientId(Long clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(description = "")
  public Long getClientId() {
    return clientId;
  }

  public void setClientId(Long clientId) {
    this.clientId = clientId;
  }

  public InteropTransferResponseData loanId(Long loanId) {
    this.loanId = loanId;
    return this;
  }

   /**
   * Get loanId
   * @return loanId
  **/
  @Schema(description = "")
  public Long getLoanId() {
    return loanId;
  }

  public void setLoanId(Long loanId) {
    this.loanId = loanId;
  }

  public InteropTransferResponseData savingsId(Long savingsId) {
    this.savingsId = savingsId;
    return this;
  }

   /**
   * Get savingsId
   * @return savingsId
  **/
  @Schema(description = "")
  public Long getSavingsId() {
    return savingsId;
  }

  public void setSavingsId(Long savingsId) {
    this.savingsId = savingsId;
  }

  public InteropTransferResponseData subResourceId(Long subResourceId) {
    this.subResourceId = subResourceId;
    return this;
  }

   /**
   * Get subResourceId
   * @return subResourceId
  **/
  @Schema(description = "")
  public Long getSubResourceId() {
    return subResourceId;
  }

  public void setSubResourceId(Long subResourceId) {
    this.subResourceId = subResourceId;
  }

  public InteropTransferResponseData transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @Schema(description = "")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public InteropTransferResponseData changes(Map<String, Object> changes) {
    this.changes = changes;
    return this;
  }

  public InteropTransferResponseData putChangesItem(String key, Object changesItem) {
    if (this.changes == null) {
      this.changes = new HashMap<>();
    }
    this.changes.put(key, changesItem);
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @Schema(description = "")
  public Map<String, Object> getChanges() {
    return changes;
  }

  public void setChanges(Map<String, Object> changes) {
    this.changes = changes;
  }

  public InteropTransferResponseData productId(Long productId) {
    this.productId = productId;
    return this;
  }

   /**
   * Get productId
   * @return productId
  **/
  @Schema(description = "")
  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }

  public InteropTransferResponseData gsimId(Long gsimId) {
    this.gsimId = gsimId;
    return this;
  }

   /**
   * Get gsimId
   * @return gsimId
  **/
  @Schema(description = "")
  public Long getGsimId() {
    return gsimId;
  }

  public void setGsimId(Long gsimId) {
    this.gsimId = gsimId;
  }

  public InteropTransferResponseData glimId(Long glimId) {
    this.glimId = glimId;
    return this;
  }

   /**
   * Get glimId
   * @return glimId
  **/
  @Schema(description = "")
  public Long getGlimId() {
    return glimId;
  }

  public void setGlimId(Long glimId) {
    this.glimId = glimId;
  }

  public InteropTransferResponseData rollbackTransaction(Boolean rollbackTransaction) {
    this.rollbackTransaction = rollbackTransaction;
    return this;
  }

   /**
   * Get rollbackTransaction
   * @return rollbackTransaction
  **/
  @Schema(description = "")
  public Boolean isRollbackTransaction() {
    return rollbackTransaction;
  }

  public void setRollbackTransaction(Boolean rollbackTransaction) {
    this.rollbackTransaction = rollbackTransaction;
  }

  public InteropTransferResponseData transactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

   /**
   * Get transactionCode
   * @return transactionCode
  **/
  @Schema(required = true, description = "")
  public String getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
  }

  public InteropTransferResponseData state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(required = true, description = "")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public InteropTransferResponseData expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @Schema(description = "")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public InteropTransferResponseData extensionList(List<ExtensionData> extensionList) {
    this.extensionList = extensionList;
    return this;
  }

  public InteropTransferResponseData addExtensionListItem(ExtensionData extensionListItem) {
    if (this.extensionList == null) {
      this.extensionList = new ArrayList<>();
    }
    this.extensionList.add(extensionListItem);
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  @Schema(description = "")
  public List<ExtensionData> getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(List<ExtensionData> extensionList) {
    this.extensionList = extensionList;
  }

  public InteropTransferResponseData transferCode(String transferCode) {
    this.transferCode = transferCode;
    return this;
  }

   /**
   * Get transferCode
   * @return transferCode
  **/
  @Schema(required = true, description = "")
  public String getTransferCode() {
    return transferCode;
  }

  public void setTransferCode(String transferCode) {
    this.transferCode = transferCode;
  }

  public InteropTransferResponseData completedTimestamp(String completedTimestamp) {
    this.completedTimestamp = completedTimestamp;
    return this;
  }

   /**
   * Get completedTimestamp
   * @return completedTimestamp
  **/
  @Schema(description = "")
  public String getCompletedTimestamp() {
    return completedTimestamp;
  }

  public void setCompletedTimestamp(String completedTimestamp) {
    this.completedTimestamp = completedTimestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InteropTransferResponseData interopTransferResponseData = (InteropTransferResponseData) o;
    return Objects.equals(this.officeId, interopTransferResponseData.officeId) &&
        Objects.equals(this.groupId, interopTransferResponseData.groupId) &&
        Objects.equals(this.clientId, interopTransferResponseData.clientId) &&
        Objects.equals(this.loanId, interopTransferResponseData.loanId) &&
        Objects.equals(this.savingsId, interopTransferResponseData.savingsId) &&
        Objects.equals(this.subResourceId, interopTransferResponseData.subResourceId) &&
        Objects.equals(this.transactionId, interopTransferResponseData.transactionId) &&
        Objects.equals(this.changes, interopTransferResponseData.changes) &&
        Objects.equals(this.productId, interopTransferResponseData.productId) &&
        Objects.equals(this.gsimId, interopTransferResponseData.gsimId) &&
        Objects.equals(this.glimId, interopTransferResponseData.glimId) &&
        Objects.equals(this.rollbackTransaction, interopTransferResponseData.rollbackTransaction) &&
        Objects.equals(this.transactionCode, interopTransferResponseData.transactionCode) &&
        Objects.equals(this.state, interopTransferResponseData.state) &&
        Objects.equals(this.expiration, interopTransferResponseData.expiration) &&
        Objects.equals(this.extensionList, interopTransferResponseData.extensionList) &&
        Objects.equals(this.transferCode, interopTransferResponseData.transferCode) &&
        Objects.equals(this.completedTimestamp, interopTransferResponseData.completedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(officeId, groupId, clientId, loanId, savingsId, subResourceId, transactionId, changes, productId, gsimId, glimId, rollbackTransaction, transactionCode, state, expiration, extensionList, transferCode, completedTimestamp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InteropTransferResponseData {\n");
    
    sb.append("    officeId: ").append(toIndentedString(officeId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    loanId: ").append(toIndentedString(loanId)).append("\n");
    sb.append("    savingsId: ").append(toIndentedString(savingsId)).append("\n");
    sb.append("    subResourceId: ").append(toIndentedString(subResourceId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    gsimId: ").append(toIndentedString(gsimId)).append("\n");
    sb.append("    glimId: ").append(toIndentedString(glimId)).append("\n");
    sb.append("    rollbackTransaction: ").append(toIndentedString(rollbackTransaction)).append("\n");
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("    transferCode: ").append(toIndentedString(transferCode)).append("\n");
    sb.append("    completedTimestamp: ").append(toIndentedString(completedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
