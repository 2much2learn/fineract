/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ResultsetColumnHeaderData
 */


public class ResultsetColumnHeaderData {
  @SerializedName("columnName")
  private String columnName = null;

  @SerializedName("columnType")
  private String columnType = null;

  @SerializedName("columnLength")
  private Long columnLength = null;

  @SerializedName("columnDisplayType")
  private String columnDisplayType = null;

  @SerializedName("columnCode")
  private String columnCode = null;

  @SerializedName("optional")
  private Boolean optional = null;

  @SerializedName("dateDisplayType")
  private Boolean dateDisplayType = null;

  @SerializedName("integerDisplayType")
  private Boolean integerDisplayType = null;

  @SerializedName("booleanDisplayType")
  private Boolean booleanDisplayType = null;

  @SerializedName("decimalDisplayType")
  private Boolean decimalDisplayType = null;

  @SerializedName("codeValueDisplayType")
  private Boolean codeValueDisplayType = null;

  @SerializedName("codeLookupDisplayType")
  private Boolean codeLookupDisplayType = null;

  @SerializedName("string")
  private Boolean string = null;

  @SerializedName("dateTimeDisplayType")
  private Boolean dateTimeDisplayType = null;

  @SerializedName("mandatory")
  private Boolean mandatory = null;

  public ResultsetColumnHeaderData columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

   /**
   * Get columnName
   * @return columnName
  **/
  @Schema(description = "")
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }

  public ResultsetColumnHeaderData columnType(String columnType) {
    this.columnType = columnType;
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @Schema(description = "")
  public String getColumnType() {
    return columnType;
  }

  public void setColumnType(String columnType) {
    this.columnType = columnType;
  }

  public ResultsetColumnHeaderData columnLength(Long columnLength) {
    this.columnLength = columnLength;
    return this;
  }

   /**
   * Get columnLength
   * @return columnLength
  **/
  @Schema(description = "")
  public Long getColumnLength() {
    return columnLength;
  }

  public void setColumnLength(Long columnLength) {
    this.columnLength = columnLength;
  }

  public ResultsetColumnHeaderData columnDisplayType(String columnDisplayType) {
    this.columnDisplayType = columnDisplayType;
    return this;
  }

   /**
   * Get columnDisplayType
   * @return columnDisplayType
  **/
  @Schema(description = "")
  public String getColumnDisplayType() {
    return columnDisplayType;
  }

  public void setColumnDisplayType(String columnDisplayType) {
    this.columnDisplayType = columnDisplayType;
  }

  public ResultsetColumnHeaderData columnCode(String columnCode) {
    this.columnCode = columnCode;
    return this;
  }

   /**
   * Get columnCode
   * @return columnCode
  **/
  @Schema(description = "")
  public String getColumnCode() {
    return columnCode;
  }

  public void setColumnCode(String columnCode) {
    this.columnCode = columnCode;
  }

  public ResultsetColumnHeaderData optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

   /**
   * Get optional
   * @return optional
  **/
  @Schema(description = "")
  public Boolean isOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }

  public ResultsetColumnHeaderData dateDisplayType(Boolean dateDisplayType) {
    this.dateDisplayType = dateDisplayType;
    return this;
  }

   /**
   * Get dateDisplayType
   * @return dateDisplayType
  **/
  @Schema(description = "")
  public Boolean isDateDisplayType() {
    return dateDisplayType;
  }

  public void setDateDisplayType(Boolean dateDisplayType) {
    this.dateDisplayType = dateDisplayType;
  }

  public ResultsetColumnHeaderData integerDisplayType(Boolean integerDisplayType) {
    this.integerDisplayType = integerDisplayType;
    return this;
  }

   /**
   * Get integerDisplayType
   * @return integerDisplayType
  **/
  @Schema(description = "")
  public Boolean isIntegerDisplayType() {
    return integerDisplayType;
  }

  public void setIntegerDisplayType(Boolean integerDisplayType) {
    this.integerDisplayType = integerDisplayType;
  }

  public ResultsetColumnHeaderData booleanDisplayType(Boolean booleanDisplayType) {
    this.booleanDisplayType = booleanDisplayType;
    return this;
  }

   /**
   * Get booleanDisplayType
   * @return booleanDisplayType
  **/
  @Schema(description = "")
  public Boolean isBooleanDisplayType() {
    return booleanDisplayType;
  }

  public void setBooleanDisplayType(Boolean booleanDisplayType) {
    this.booleanDisplayType = booleanDisplayType;
  }

  public ResultsetColumnHeaderData decimalDisplayType(Boolean decimalDisplayType) {
    this.decimalDisplayType = decimalDisplayType;
    return this;
  }

   /**
   * Get decimalDisplayType
   * @return decimalDisplayType
  **/
  @Schema(description = "")
  public Boolean isDecimalDisplayType() {
    return decimalDisplayType;
  }

  public void setDecimalDisplayType(Boolean decimalDisplayType) {
    this.decimalDisplayType = decimalDisplayType;
  }

  public ResultsetColumnHeaderData codeValueDisplayType(Boolean codeValueDisplayType) {
    this.codeValueDisplayType = codeValueDisplayType;
    return this;
  }

   /**
   * Get codeValueDisplayType
   * @return codeValueDisplayType
  **/
  @Schema(description = "")
  public Boolean isCodeValueDisplayType() {
    return codeValueDisplayType;
  }

  public void setCodeValueDisplayType(Boolean codeValueDisplayType) {
    this.codeValueDisplayType = codeValueDisplayType;
  }

  public ResultsetColumnHeaderData codeLookupDisplayType(Boolean codeLookupDisplayType) {
    this.codeLookupDisplayType = codeLookupDisplayType;
    return this;
  }

   /**
   * Get codeLookupDisplayType
   * @return codeLookupDisplayType
  **/
  @Schema(description = "")
  public Boolean isCodeLookupDisplayType() {
    return codeLookupDisplayType;
  }

  public void setCodeLookupDisplayType(Boolean codeLookupDisplayType) {
    this.codeLookupDisplayType = codeLookupDisplayType;
  }

  public ResultsetColumnHeaderData string(Boolean string) {
    this.string = string;
    return this;
  }

   /**
   * Get string
   * @return string
  **/
  @Schema(description = "")
  public Boolean isString() {
    return string;
  }

  public void setString(Boolean string) {
    this.string = string;
  }

  public ResultsetColumnHeaderData dateTimeDisplayType(Boolean dateTimeDisplayType) {
    this.dateTimeDisplayType = dateTimeDisplayType;
    return this;
  }

   /**
   * Get dateTimeDisplayType
   * @return dateTimeDisplayType
  **/
  @Schema(description = "")
  public Boolean isDateTimeDisplayType() {
    return dateTimeDisplayType;
  }

  public void setDateTimeDisplayType(Boolean dateTimeDisplayType) {
    this.dateTimeDisplayType = dateTimeDisplayType;
  }

  public ResultsetColumnHeaderData mandatory(Boolean mandatory) {
    this.mandatory = mandatory;
    return this;
  }

   /**
   * Get mandatory
   * @return mandatory
  **/
  @Schema(description = "")
  public Boolean isMandatory() {
    return mandatory;
  }

  public void setMandatory(Boolean mandatory) {
    this.mandatory = mandatory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResultsetColumnHeaderData resultsetColumnHeaderData = (ResultsetColumnHeaderData) o;
    return Objects.equals(this.columnName, resultsetColumnHeaderData.columnName) &&
        Objects.equals(this.columnType, resultsetColumnHeaderData.columnType) &&
        Objects.equals(this.columnLength, resultsetColumnHeaderData.columnLength) &&
        Objects.equals(this.columnDisplayType, resultsetColumnHeaderData.columnDisplayType) &&
        Objects.equals(this.columnCode, resultsetColumnHeaderData.columnCode) &&
        Objects.equals(this.optional, resultsetColumnHeaderData.optional) &&
        Objects.equals(this.dateDisplayType, resultsetColumnHeaderData.dateDisplayType) &&
        Objects.equals(this.integerDisplayType, resultsetColumnHeaderData.integerDisplayType) &&
        Objects.equals(this.booleanDisplayType, resultsetColumnHeaderData.booleanDisplayType) &&
        Objects.equals(this.decimalDisplayType, resultsetColumnHeaderData.decimalDisplayType) &&
        Objects.equals(this.codeValueDisplayType, resultsetColumnHeaderData.codeValueDisplayType) &&
        Objects.equals(this.codeLookupDisplayType, resultsetColumnHeaderData.codeLookupDisplayType) &&
        Objects.equals(this.string, resultsetColumnHeaderData.string) &&
        Objects.equals(this.dateTimeDisplayType, resultsetColumnHeaderData.dateTimeDisplayType) &&
        Objects.equals(this.mandatory, resultsetColumnHeaderData.mandatory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnName, columnType, columnLength, columnDisplayType, columnCode, optional, dateDisplayType, integerDisplayType, booleanDisplayType, decimalDisplayType, codeValueDisplayType, codeLookupDisplayType, string, dateTimeDisplayType, mandatory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResultsetColumnHeaderData {\n");
    
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    columnLength: ").append(toIndentedString(columnLength)).append("\n");
    sb.append("    columnDisplayType: ").append(toIndentedString(columnDisplayType)).append("\n");
    sb.append("    columnCode: ").append(toIndentedString(columnCode)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    dateDisplayType: ").append(toIndentedString(dateDisplayType)).append("\n");
    sb.append("    integerDisplayType: ").append(toIndentedString(integerDisplayType)).append("\n");
    sb.append("    booleanDisplayType: ").append(toIndentedString(booleanDisplayType)).append("\n");
    sb.append("    decimalDisplayType: ").append(toIndentedString(decimalDisplayType)).append("\n");
    sb.append("    codeValueDisplayType: ").append(toIndentedString(codeValueDisplayType)).append("\n");
    sb.append("    codeLookupDisplayType: ").append(toIndentedString(codeLookupDisplayType)).append("\n");
    sb.append("    string: ").append(toIndentedString(string)).append("\n");
    sb.append("    dateTimeDisplayType: ").append(toIndentedString(dateTimeDisplayType)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
