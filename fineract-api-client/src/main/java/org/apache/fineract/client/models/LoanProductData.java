/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.apache.fineract.client.models.ChargeData;
import org.apache.fineract.client.models.CurrencyData;
import org.apache.fineract.client.models.EnumOptionData;
import org.apache.fineract.client.models.FundData;
import org.apache.fineract.client.models.LoanProductBorrowerCycleVariationData;
import org.apache.fineract.client.models.LoanProductConfigurableAttributes;
import org.apache.fineract.client.models.LoanProductInterestRecalculationData;
/**
 * LoanProductData
 */


public class LoanProductData {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("fundId")
  private Long fundId = null;

  @SerializedName("fundName")
  private String fundName = null;

  @SerializedName("startDate")
  private LocalDate startDate = null;

  @SerializedName("closeDate")
  private LocalDate closeDate = null;

  @SerializedName("currency")
  private CurrencyData currency = null;

  @SerializedName("principal")
  private BigDecimal principal = null;

  @SerializedName("minPrincipal")
  private BigDecimal minPrincipal = null;

  @SerializedName("maxPrincipal")
  private BigDecimal maxPrincipal = null;

  @SerializedName("numberOfRepayments")
  private Integer numberOfRepayments = null;

  @SerializedName("minNumberOfRepayments")
  private Integer minNumberOfRepayments = null;

  @SerializedName("maxNumberOfRepayments")
  private Integer maxNumberOfRepayments = null;

  @SerializedName("repaymentEvery")
  private Integer repaymentEvery = null;

  @SerializedName("repaymentFrequencyType")
  private EnumOptionData repaymentFrequencyType = null;

  @SerializedName("interestRatePerPeriod")
  private BigDecimal interestRatePerPeriod = null;

  @SerializedName("minInterestRatePerPeriod")
  private BigDecimal minInterestRatePerPeriod = null;

  @SerializedName("maxInterestRatePerPeriod")
  private BigDecimal maxInterestRatePerPeriod = null;

  @SerializedName("interestRateFrequencyType")
  private EnumOptionData interestRateFrequencyType = null;

  @SerializedName("annualInterestRate")
  private BigDecimal annualInterestRate = null;

  @SerializedName("interestRateDifferential")
  private BigDecimal interestRateDifferential = null;

  @SerializedName("minDifferentialLendingRate")
  private BigDecimal minDifferentialLendingRate = null;

  @SerializedName("defaultDifferentialLendingRate")
  private BigDecimal defaultDifferentialLendingRate = null;

  @SerializedName("maxDifferentialLendingRate")
  private BigDecimal maxDifferentialLendingRate = null;

  @SerializedName("amortizationType")
  private EnumOptionData amortizationType = null;

  @SerializedName("interestType")
  private EnumOptionData interestType = null;

  @SerializedName("interestCalculationPeriodType")
  private EnumOptionData interestCalculationPeriodType = null;

  @SerializedName("allowPartialPeriodInterestCalcualtion")
  private Boolean allowPartialPeriodInterestCalcualtion = null;

  @SerializedName("inArrearsTolerance")
  private BigDecimal inArrearsTolerance = null;

  @SerializedName("transactionProcessingStrategyId")
  private Long transactionProcessingStrategyId = null;

  @SerializedName("transactionProcessingStrategyName")
  private String transactionProcessingStrategyName = null;

  @SerializedName("graceOnPrincipalPayment")
  private Integer graceOnPrincipalPayment = null;

  @SerializedName("recurringMoratoriumOnPrincipalPeriods")
  private Integer recurringMoratoriumOnPrincipalPeriods = null;

  @SerializedName("graceOnInterestPayment")
  private Integer graceOnInterestPayment = null;

  @SerializedName("graceOnInterestCharged")
  private Integer graceOnInterestCharged = null;

  @SerializedName("graceOnArrearsAgeing")
  private Integer graceOnArrearsAgeing = null;

  @SerializedName("daysInMonthType")
  private EnumOptionData daysInMonthType = null;

  @SerializedName("daysInYearType")
  private EnumOptionData daysInYearType = null;

  @SerializedName("interestRecalculationData")
  private LoanProductInterestRecalculationData interestRecalculationData = null;

  @SerializedName("principalVariationsForBorrowerCycle")
  private List<LoanProductBorrowerCycleVariationData> principalVariationsForBorrowerCycle = null;

  @SerializedName("interestRateVariationsForBorrowerCycle")
  private List<LoanProductBorrowerCycleVariationData> interestRateVariationsForBorrowerCycle = null;

  @SerializedName("numberOfRepaymentVariationsForBorrowerCycle")
  private List<LoanProductBorrowerCycleVariationData> numberOfRepaymentVariationsForBorrowerCycle = null;

  @SerializedName("fundOptions")
  private List<FundData> fundOptions = null;

  @SerializedName("repaymentFrequencyTypeOptions")
  private List<EnumOptionData> repaymentFrequencyTypeOptions = null;

  @SerializedName("interestRateFrequencyTypeOptions")
  private List<EnumOptionData> interestRateFrequencyTypeOptions = null;

  @SerializedName("amortizationTypeOptions")
  private List<EnumOptionData> amortizationTypeOptions = null;

  @SerializedName("interestTypeOptions")
  private List<EnumOptionData> interestTypeOptions = null;

  @SerializedName("interestCalculationPeriodTypeOptions")
  private List<EnumOptionData> interestCalculationPeriodTypeOptions = null;

  @SerializedName("chargeOptions")
  private List<ChargeData> chargeOptions = null;

  @SerializedName("multiDisburseLoan")
  private Boolean multiDisburseLoan = null;

  @SerializedName("outstandingLoanBalance")
  private BigDecimal outstandingLoanBalance = null;

  @SerializedName("equalAmortization")
  private Boolean equalAmortization = null;

  @SerializedName("interestRecalculationEnabled")
  private Boolean interestRecalculationEnabled = null;

  @SerializedName("compoundingToBePostedAsTransaction")
  private Boolean compoundingToBePostedAsTransaction = null;

  @SerializedName("floatingInterestRateCalculationAllowed")
  private Boolean floatingInterestRateCalculationAllowed = null;

  @SerializedName("linkedToFloatingInterestRates")
  private Boolean linkedToFloatingInterestRates = null;

  @SerializedName("variableInstallmentsAllowed")
  private Boolean variableInstallmentsAllowed = null;

  @SerializedName("getloanProductConfigurableAttributes")
  private LoanProductConfigurableAttributes getloanProductConfigurableAttributes = null;

  @SerializedName("minimumGapBetweenInstallments")
  private Integer minimumGapBetweenInstallments = null;

  @SerializedName("maximumGapBetweenInstallments")
  private Integer maximumGapBetweenInstallments = null;

  public LoanProductData id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public LoanProductData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LoanProductData description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public LoanProductData fundId(Long fundId) {
    this.fundId = fundId;
    return this;
  }

   /**
   * Get fundId
   * @return fundId
  **/
  @Schema(description = "")
  public Long getFundId() {
    return fundId;
  }

  public void setFundId(Long fundId) {
    this.fundId = fundId;
  }

  public LoanProductData fundName(String fundName) {
    this.fundName = fundName;
    return this;
  }

   /**
   * Get fundName
   * @return fundName
  **/
  @Schema(description = "")
  public String getFundName() {
    return fundName;
  }

  public void setFundName(String fundName) {
    this.fundName = fundName;
  }

  public LoanProductData startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @Schema(description = "")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public LoanProductData closeDate(LocalDate closeDate) {
    this.closeDate = closeDate;
    return this;
  }

   /**
   * Get closeDate
   * @return closeDate
  **/
  @Schema(description = "")
  public LocalDate getCloseDate() {
    return closeDate;
  }

  public void setCloseDate(LocalDate closeDate) {
    this.closeDate = closeDate;
  }

  public LoanProductData currency(CurrencyData currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(description = "")
  public CurrencyData getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyData currency) {
    this.currency = currency;
  }

  public LoanProductData principal(BigDecimal principal) {
    this.principal = principal;
    return this;
  }

   /**
   * Get principal
   * @return principal
  **/
  @Schema(description = "")
  public BigDecimal getPrincipal() {
    return principal;
  }

  public void setPrincipal(BigDecimal principal) {
    this.principal = principal;
  }

  public LoanProductData minPrincipal(BigDecimal minPrincipal) {
    this.minPrincipal = minPrincipal;
    return this;
  }

   /**
   * Get minPrincipal
   * @return minPrincipal
  **/
  @Schema(description = "")
  public BigDecimal getMinPrincipal() {
    return minPrincipal;
  }

  public void setMinPrincipal(BigDecimal minPrincipal) {
    this.minPrincipal = minPrincipal;
  }

  public LoanProductData maxPrincipal(BigDecimal maxPrincipal) {
    this.maxPrincipal = maxPrincipal;
    return this;
  }

   /**
   * Get maxPrincipal
   * @return maxPrincipal
  **/
  @Schema(description = "")
  public BigDecimal getMaxPrincipal() {
    return maxPrincipal;
  }

  public void setMaxPrincipal(BigDecimal maxPrincipal) {
    this.maxPrincipal = maxPrincipal;
  }

  public LoanProductData numberOfRepayments(Integer numberOfRepayments) {
    this.numberOfRepayments = numberOfRepayments;
    return this;
  }

   /**
   * Get numberOfRepayments
   * @return numberOfRepayments
  **/
  @Schema(description = "")
  public Integer getNumberOfRepayments() {
    return numberOfRepayments;
  }

  public void setNumberOfRepayments(Integer numberOfRepayments) {
    this.numberOfRepayments = numberOfRepayments;
  }

  public LoanProductData minNumberOfRepayments(Integer minNumberOfRepayments) {
    this.minNumberOfRepayments = minNumberOfRepayments;
    return this;
  }

   /**
   * Get minNumberOfRepayments
   * @return minNumberOfRepayments
  **/
  @Schema(description = "")
  public Integer getMinNumberOfRepayments() {
    return minNumberOfRepayments;
  }

  public void setMinNumberOfRepayments(Integer minNumberOfRepayments) {
    this.minNumberOfRepayments = minNumberOfRepayments;
  }

  public LoanProductData maxNumberOfRepayments(Integer maxNumberOfRepayments) {
    this.maxNumberOfRepayments = maxNumberOfRepayments;
    return this;
  }

   /**
   * Get maxNumberOfRepayments
   * @return maxNumberOfRepayments
  **/
  @Schema(description = "")
  public Integer getMaxNumberOfRepayments() {
    return maxNumberOfRepayments;
  }

  public void setMaxNumberOfRepayments(Integer maxNumberOfRepayments) {
    this.maxNumberOfRepayments = maxNumberOfRepayments;
  }

  public LoanProductData repaymentEvery(Integer repaymentEvery) {
    this.repaymentEvery = repaymentEvery;
    return this;
  }

   /**
   * Get repaymentEvery
   * @return repaymentEvery
  **/
  @Schema(description = "")
  public Integer getRepaymentEvery() {
    return repaymentEvery;
  }

  public void setRepaymentEvery(Integer repaymentEvery) {
    this.repaymentEvery = repaymentEvery;
  }

  public LoanProductData repaymentFrequencyType(EnumOptionData repaymentFrequencyType) {
    this.repaymentFrequencyType = repaymentFrequencyType;
    return this;
  }

   /**
   * Get repaymentFrequencyType
   * @return repaymentFrequencyType
  **/
  @Schema(description = "")
  public EnumOptionData getRepaymentFrequencyType() {
    return repaymentFrequencyType;
  }

  public void setRepaymentFrequencyType(EnumOptionData repaymentFrequencyType) {
    this.repaymentFrequencyType = repaymentFrequencyType;
  }

  public LoanProductData interestRatePerPeriod(BigDecimal interestRatePerPeriod) {
    this.interestRatePerPeriod = interestRatePerPeriod;
    return this;
  }

   /**
   * Get interestRatePerPeriod
   * @return interestRatePerPeriod
  **/
  @Schema(description = "")
  public BigDecimal getInterestRatePerPeriod() {
    return interestRatePerPeriod;
  }

  public void setInterestRatePerPeriod(BigDecimal interestRatePerPeriod) {
    this.interestRatePerPeriod = interestRatePerPeriod;
  }

  public LoanProductData minInterestRatePerPeriod(BigDecimal minInterestRatePerPeriod) {
    this.minInterestRatePerPeriod = minInterestRatePerPeriod;
    return this;
  }

   /**
   * Get minInterestRatePerPeriod
   * @return minInterestRatePerPeriod
  **/
  @Schema(description = "")
  public BigDecimal getMinInterestRatePerPeriod() {
    return minInterestRatePerPeriod;
  }

  public void setMinInterestRatePerPeriod(BigDecimal minInterestRatePerPeriod) {
    this.minInterestRatePerPeriod = minInterestRatePerPeriod;
  }

  public LoanProductData maxInterestRatePerPeriod(BigDecimal maxInterestRatePerPeriod) {
    this.maxInterestRatePerPeriod = maxInterestRatePerPeriod;
    return this;
  }

   /**
   * Get maxInterestRatePerPeriod
   * @return maxInterestRatePerPeriod
  **/
  @Schema(description = "")
  public BigDecimal getMaxInterestRatePerPeriod() {
    return maxInterestRatePerPeriod;
  }

  public void setMaxInterestRatePerPeriod(BigDecimal maxInterestRatePerPeriod) {
    this.maxInterestRatePerPeriod = maxInterestRatePerPeriod;
  }

  public LoanProductData interestRateFrequencyType(EnumOptionData interestRateFrequencyType) {
    this.interestRateFrequencyType = interestRateFrequencyType;
    return this;
  }

   /**
   * Get interestRateFrequencyType
   * @return interestRateFrequencyType
  **/
  @Schema(description = "")
  public EnumOptionData getInterestRateFrequencyType() {
    return interestRateFrequencyType;
  }

  public void setInterestRateFrequencyType(EnumOptionData interestRateFrequencyType) {
    this.interestRateFrequencyType = interestRateFrequencyType;
  }

  public LoanProductData annualInterestRate(BigDecimal annualInterestRate) {
    this.annualInterestRate = annualInterestRate;
    return this;
  }

   /**
   * Get annualInterestRate
   * @return annualInterestRate
  **/
  @Schema(description = "")
  public BigDecimal getAnnualInterestRate() {
    return annualInterestRate;
  }

  public void setAnnualInterestRate(BigDecimal annualInterestRate) {
    this.annualInterestRate = annualInterestRate;
  }

  public LoanProductData interestRateDifferential(BigDecimal interestRateDifferential) {
    this.interestRateDifferential = interestRateDifferential;
    return this;
  }

   /**
   * Get interestRateDifferential
   * @return interestRateDifferential
  **/
  @Schema(description = "")
  public BigDecimal getInterestRateDifferential() {
    return interestRateDifferential;
  }

  public void setInterestRateDifferential(BigDecimal interestRateDifferential) {
    this.interestRateDifferential = interestRateDifferential;
  }

  public LoanProductData minDifferentialLendingRate(BigDecimal minDifferentialLendingRate) {
    this.minDifferentialLendingRate = minDifferentialLendingRate;
    return this;
  }

   /**
   * Get minDifferentialLendingRate
   * @return minDifferentialLendingRate
  **/
  @Schema(description = "")
  public BigDecimal getMinDifferentialLendingRate() {
    return minDifferentialLendingRate;
  }

  public void setMinDifferentialLendingRate(BigDecimal minDifferentialLendingRate) {
    this.minDifferentialLendingRate = minDifferentialLendingRate;
  }

  public LoanProductData defaultDifferentialLendingRate(BigDecimal defaultDifferentialLendingRate) {
    this.defaultDifferentialLendingRate = defaultDifferentialLendingRate;
    return this;
  }

   /**
   * Get defaultDifferentialLendingRate
   * @return defaultDifferentialLendingRate
  **/
  @Schema(description = "")
  public BigDecimal getDefaultDifferentialLendingRate() {
    return defaultDifferentialLendingRate;
  }

  public void setDefaultDifferentialLendingRate(BigDecimal defaultDifferentialLendingRate) {
    this.defaultDifferentialLendingRate = defaultDifferentialLendingRate;
  }

  public LoanProductData maxDifferentialLendingRate(BigDecimal maxDifferentialLendingRate) {
    this.maxDifferentialLendingRate = maxDifferentialLendingRate;
    return this;
  }

   /**
   * Get maxDifferentialLendingRate
   * @return maxDifferentialLendingRate
  **/
  @Schema(description = "")
  public BigDecimal getMaxDifferentialLendingRate() {
    return maxDifferentialLendingRate;
  }

  public void setMaxDifferentialLendingRate(BigDecimal maxDifferentialLendingRate) {
    this.maxDifferentialLendingRate = maxDifferentialLendingRate;
  }

  public LoanProductData amortizationType(EnumOptionData amortizationType) {
    this.amortizationType = amortizationType;
    return this;
  }

   /**
   * Get amortizationType
   * @return amortizationType
  **/
  @Schema(description = "")
  public EnumOptionData getAmortizationType() {
    return amortizationType;
  }

  public void setAmortizationType(EnumOptionData amortizationType) {
    this.amortizationType = amortizationType;
  }

  public LoanProductData interestType(EnumOptionData interestType) {
    this.interestType = interestType;
    return this;
  }

   /**
   * Get interestType
   * @return interestType
  **/
  @Schema(description = "")
  public EnumOptionData getInterestType() {
    return interestType;
  }

  public void setInterestType(EnumOptionData interestType) {
    this.interestType = interestType;
  }

  public LoanProductData interestCalculationPeriodType(EnumOptionData interestCalculationPeriodType) {
    this.interestCalculationPeriodType = interestCalculationPeriodType;
    return this;
  }

   /**
   * Get interestCalculationPeriodType
   * @return interestCalculationPeriodType
  **/
  @Schema(description = "")
  public EnumOptionData getInterestCalculationPeriodType() {
    return interestCalculationPeriodType;
  }

  public void setInterestCalculationPeriodType(EnumOptionData interestCalculationPeriodType) {
    this.interestCalculationPeriodType = interestCalculationPeriodType;
  }

  public LoanProductData allowPartialPeriodInterestCalcualtion(Boolean allowPartialPeriodInterestCalcualtion) {
    this.allowPartialPeriodInterestCalcualtion = allowPartialPeriodInterestCalcualtion;
    return this;
  }

   /**
   * Get allowPartialPeriodInterestCalcualtion
   * @return allowPartialPeriodInterestCalcualtion
  **/
  @Schema(description = "")
  public Boolean isAllowPartialPeriodInterestCalcualtion() {
    return allowPartialPeriodInterestCalcualtion;
  }

  public void setAllowPartialPeriodInterestCalcualtion(Boolean allowPartialPeriodInterestCalcualtion) {
    this.allowPartialPeriodInterestCalcualtion = allowPartialPeriodInterestCalcualtion;
  }

  public LoanProductData inArrearsTolerance(BigDecimal inArrearsTolerance) {
    this.inArrearsTolerance = inArrearsTolerance;
    return this;
  }

   /**
   * Get inArrearsTolerance
   * @return inArrearsTolerance
  **/
  @Schema(description = "")
  public BigDecimal getInArrearsTolerance() {
    return inArrearsTolerance;
  }

  public void setInArrearsTolerance(BigDecimal inArrearsTolerance) {
    this.inArrearsTolerance = inArrearsTolerance;
  }

  public LoanProductData transactionProcessingStrategyId(Long transactionProcessingStrategyId) {
    this.transactionProcessingStrategyId = transactionProcessingStrategyId;
    return this;
  }

   /**
   * Get transactionProcessingStrategyId
   * @return transactionProcessingStrategyId
  **/
  @Schema(description = "")
  public Long getTransactionProcessingStrategyId() {
    return transactionProcessingStrategyId;
  }

  public void setTransactionProcessingStrategyId(Long transactionProcessingStrategyId) {
    this.transactionProcessingStrategyId = transactionProcessingStrategyId;
  }

  public LoanProductData transactionProcessingStrategyName(String transactionProcessingStrategyName) {
    this.transactionProcessingStrategyName = transactionProcessingStrategyName;
    return this;
  }

   /**
   * Get transactionProcessingStrategyName
   * @return transactionProcessingStrategyName
  **/
  @Schema(description = "")
  public String getTransactionProcessingStrategyName() {
    return transactionProcessingStrategyName;
  }

  public void setTransactionProcessingStrategyName(String transactionProcessingStrategyName) {
    this.transactionProcessingStrategyName = transactionProcessingStrategyName;
  }

  public LoanProductData graceOnPrincipalPayment(Integer graceOnPrincipalPayment) {
    this.graceOnPrincipalPayment = graceOnPrincipalPayment;
    return this;
  }

   /**
   * Get graceOnPrincipalPayment
   * @return graceOnPrincipalPayment
  **/
  @Schema(description = "")
  public Integer getGraceOnPrincipalPayment() {
    return graceOnPrincipalPayment;
  }

  public void setGraceOnPrincipalPayment(Integer graceOnPrincipalPayment) {
    this.graceOnPrincipalPayment = graceOnPrincipalPayment;
  }

  public LoanProductData recurringMoratoriumOnPrincipalPeriods(Integer recurringMoratoriumOnPrincipalPeriods) {
    this.recurringMoratoriumOnPrincipalPeriods = recurringMoratoriumOnPrincipalPeriods;
    return this;
  }

   /**
   * Get recurringMoratoriumOnPrincipalPeriods
   * @return recurringMoratoriumOnPrincipalPeriods
  **/
  @Schema(description = "")
  public Integer getRecurringMoratoriumOnPrincipalPeriods() {
    return recurringMoratoriumOnPrincipalPeriods;
  }

  public void setRecurringMoratoriumOnPrincipalPeriods(Integer recurringMoratoriumOnPrincipalPeriods) {
    this.recurringMoratoriumOnPrincipalPeriods = recurringMoratoriumOnPrincipalPeriods;
  }

  public LoanProductData graceOnInterestPayment(Integer graceOnInterestPayment) {
    this.graceOnInterestPayment = graceOnInterestPayment;
    return this;
  }

   /**
   * Get graceOnInterestPayment
   * @return graceOnInterestPayment
  **/
  @Schema(description = "")
  public Integer getGraceOnInterestPayment() {
    return graceOnInterestPayment;
  }

  public void setGraceOnInterestPayment(Integer graceOnInterestPayment) {
    this.graceOnInterestPayment = graceOnInterestPayment;
  }

  public LoanProductData graceOnInterestCharged(Integer graceOnInterestCharged) {
    this.graceOnInterestCharged = graceOnInterestCharged;
    return this;
  }

   /**
   * Get graceOnInterestCharged
   * @return graceOnInterestCharged
  **/
  @Schema(description = "")
  public Integer getGraceOnInterestCharged() {
    return graceOnInterestCharged;
  }

  public void setGraceOnInterestCharged(Integer graceOnInterestCharged) {
    this.graceOnInterestCharged = graceOnInterestCharged;
  }

  public LoanProductData graceOnArrearsAgeing(Integer graceOnArrearsAgeing) {
    this.graceOnArrearsAgeing = graceOnArrearsAgeing;
    return this;
  }

   /**
   * Get graceOnArrearsAgeing
   * @return graceOnArrearsAgeing
  **/
  @Schema(description = "")
  public Integer getGraceOnArrearsAgeing() {
    return graceOnArrearsAgeing;
  }

  public void setGraceOnArrearsAgeing(Integer graceOnArrearsAgeing) {
    this.graceOnArrearsAgeing = graceOnArrearsAgeing;
  }

  public LoanProductData daysInMonthType(EnumOptionData daysInMonthType) {
    this.daysInMonthType = daysInMonthType;
    return this;
  }

   /**
   * Get daysInMonthType
   * @return daysInMonthType
  **/
  @Schema(description = "")
  public EnumOptionData getDaysInMonthType() {
    return daysInMonthType;
  }

  public void setDaysInMonthType(EnumOptionData daysInMonthType) {
    this.daysInMonthType = daysInMonthType;
  }

  public LoanProductData daysInYearType(EnumOptionData daysInYearType) {
    this.daysInYearType = daysInYearType;
    return this;
  }

   /**
   * Get daysInYearType
   * @return daysInYearType
  **/
  @Schema(description = "")
  public EnumOptionData getDaysInYearType() {
    return daysInYearType;
  }

  public void setDaysInYearType(EnumOptionData daysInYearType) {
    this.daysInYearType = daysInYearType;
  }

  public LoanProductData interestRecalculationData(LoanProductInterestRecalculationData interestRecalculationData) {
    this.interestRecalculationData = interestRecalculationData;
    return this;
  }

   /**
   * Get interestRecalculationData
   * @return interestRecalculationData
  **/
  @Schema(description = "")
  public LoanProductInterestRecalculationData getInterestRecalculationData() {
    return interestRecalculationData;
  }

  public void setInterestRecalculationData(LoanProductInterestRecalculationData interestRecalculationData) {
    this.interestRecalculationData = interestRecalculationData;
  }

  public LoanProductData principalVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> principalVariationsForBorrowerCycle) {
    this.principalVariationsForBorrowerCycle = principalVariationsForBorrowerCycle;
    return this;
  }

  public LoanProductData addPrincipalVariationsForBorrowerCycleItem(LoanProductBorrowerCycleVariationData principalVariationsForBorrowerCycleItem) {
    if (this.principalVariationsForBorrowerCycle == null) {
      this.principalVariationsForBorrowerCycle = new ArrayList<>();
    }
    this.principalVariationsForBorrowerCycle.add(principalVariationsForBorrowerCycleItem);
    return this;
  }

   /**
   * Get principalVariationsForBorrowerCycle
   * @return principalVariationsForBorrowerCycle
  **/
  @Schema(description = "")
  public List<LoanProductBorrowerCycleVariationData> getPrincipalVariationsForBorrowerCycle() {
    return principalVariationsForBorrowerCycle;
  }

  public void setPrincipalVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> principalVariationsForBorrowerCycle) {
    this.principalVariationsForBorrowerCycle = principalVariationsForBorrowerCycle;
  }

  public LoanProductData interestRateVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> interestRateVariationsForBorrowerCycle) {
    this.interestRateVariationsForBorrowerCycle = interestRateVariationsForBorrowerCycle;
    return this;
  }

  public LoanProductData addInterestRateVariationsForBorrowerCycleItem(LoanProductBorrowerCycleVariationData interestRateVariationsForBorrowerCycleItem) {
    if (this.interestRateVariationsForBorrowerCycle == null) {
      this.interestRateVariationsForBorrowerCycle = new ArrayList<>();
    }
    this.interestRateVariationsForBorrowerCycle.add(interestRateVariationsForBorrowerCycleItem);
    return this;
  }

   /**
   * Get interestRateVariationsForBorrowerCycle
   * @return interestRateVariationsForBorrowerCycle
  **/
  @Schema(description = "")
  public List<LoanProductBorrowerCycleVariationData> getInterestRateVariationsForBorrowerCycle() {
    return interestRateVariationsForBorrowerCycle;
  }

  public void setInterestRateVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> interestRateVariationsForBorrowerCycle) {
    this.interestRateVariationsForBorrowerCycle = interestRateVariationsForBorrowerCycle;
  }

  public LoanProductData numberOfRepaymentVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> numberOfRepaymentVariationsForBorrowerCycle) {
    this.numberOfRepaymentVariationsForBorrowerCycle = numberOfRepaymentVariationsForBorrowerCycle;
    return this;
  }

  public LoanProductData addNumberOfRepaymentVariationsForBorrowerCycleItem(LoanProductBorrowerCycleVariationData numberOfRepaymentVariationsForBorrowerCycleItem) {
    if (this.numberOfRepaymentVariationsForBorrowerCycle == null) {
      this.numberOfRepaymentVariationsForBorrowerCycle = new ArrayList<>();
    }
    this.numberOfRepaymentVariationsForBorrowerCycle.add(numberOfRepaymentVariationsForBorrowerCycleItem);
    return this;
  }

   /**
   * Get numberOfRepaymentVariationsForBorrowerCycle
   * @return numberOfRepaymentVariationsForBorrowerCycle
  **/
  @Schema(description = "")
  public List<LoanProductBorrowerCycleVariationData> getNumberOfRepaymentVariationsForBorrowerCycle() {
    return numberOfRepaymentVariationsForBorrowerCycle;
  }

  public void setNumberOfRepaymentVariationsForBorrowerCycle(List<LoanProductBorrowerCycleVariationData> numberOfRepaymentVariationsForBorrowerCycle) {
    this.numberOfRepaymentVariationsForBorrowerCycle = numberOfRepaymentVariationsForBorrowerCycle;
  }

  public LoanProductData fundOptions(List<FundData> fundOptions) {
    this.fundOptions = fundOptions;
    return this;
  }

  public LoanProductData addFundOptionsItem(FundData fundOptionsItem) {
    if (this.fundOptions == null) {
      this.fundOptions = new ArrayList<>();
    }
    this.fundOptions.add(fundOptionsItem);
    return this;
  }

   /**
   * Get fundOptions
   * @return fundOptions
  **/
  @Schema(description = "")
  public List<FundData> getFundOptions() {
    return fundOptions;
  }

  public void setFundOptions(List<FundData> fundOptions) {
    this.fundOptions = fundOptions;
  }

  public LoanProductData repaymentFrequencyTypeOptions(List<EnumOptionData> repaymentFrequencyTypeOptions) {
    this.repaymentFrequencyTypeOptions = repaymentFrequencyTypeOptions;
    return this;
  }

  public LoanProductData addRepaymentFrequencyTypeOptionsItem(EnumOptionData repaymentFrequencyTypeOptionsItem) {
    if (this.repaymentFrequencyTypeOptions == null) {
      this.repaymentFrequencyTypeOptions = new ArrayList<>();
    }
    this.repaymentFrequencyTypeOptions.add(repaymentFrequencyTypeOptionsItem);
    return this;
  }

   /**
   * Get repaymentFrequencyTypeOptions
   * @return repaymentFrequencyTypeOptions
  **/
  @Schema(description = "")
  public List<EnumOptionData> getRepaymentFrequencyTypeOptions() {
    return repaymentFrequencyTypeOptions;
  }

  public void setRepaymentFrequencyTypeOptions(List<EnumOptionData> repaymentFrequencyTypeOptions) {
    this.repaymentFrequencyTypeOptions = repaymentFrequencyTypeOptions;
  }

  public LoanProductData interestRateFrequencyTypeOptions(List<EnumOptionData> interestRateFrequencyTypeOptions) {
    this.interestRateFrequencyTypeOptions = interestRateFrequencyTypeOptions;
    return this;
  }

  public LoanProductData addInterestRateFrequencyTypeOptionsItem(EnumOptionData interestRateFrequencyTypeOptionsItem) {
    if (this.interestRateFrequencyTypeOptions == null) {
      this.interestRateFrequencyTypeOptions = new ArrayList<>();
    }
    this.interestRateFrequencyTypeOptions.add(interestRateFrequencyTypeOptionsItem);
    return this;
  }

   /**
   * Get interestRateFrequencyTypeOptions
   * @return interestRateFrequencyTypeOptions
  **/
  @Schema(description = "")
  public List<EnumOptionData> getInterestRateFrequencyTypeOptions() {
    return interestRateFrequencyTypeOptions;
  }

  public void setInterestRateFrequencyTypeOptions(List<EnumOptionData> interestRateFrequencyTypeOptions) {
    this.interestRateFrequencyTypeOptions = interestRateFrequencyTypeOptions;
  }

  public LoanProductData amortizationTypeOptions(List<EnumOptionData> amortizationTypeOptions) {
    this.amortizationTypeOptions = amortizationTypeOptions;
    return this;
  }

  public LoanProductData addAmortizationTypeOptionsItem(EnumOptionData amortizationTypeOptionsItem) {
    if (this.amortizationTypeOptions == null) {
      this.amortizationTypeOptions = new ArrayList<>();
    }
    this.amortizationTypeOptions.add(amortizationTypeOptionsItem);
    return this;
  }

   /**
   * Get amortizationTypeOptions
   * @return amortizationTypeOptions
  **/
  @Schema(description = "")
  public List<EnumOptionData> getAmortizationTypeOptions() {
    return amortizationTypeOptions;
  }

  public void setAmortizationTypeOptions(List<EnumOptionData> amortizationTypeOptions) {
    this.amortizationTypeOptions = amortizationTypeOptions;
  }

  public LoanProductData interestTypeOptions(List<EnumOptionData> interestTypeOptions) {
    this.interestTypeOptions = interestTypeOptions;
    return this;
  }

  public LoanProductData addInterestTypeOptionsItem(EnumOptionData interestTypeOptionsItem) {
    if (this.interestTypeOptions == null) {
      this.interestTypeOptions = new ArrayList<>();
    }
    this.interestTypeOptions.add(interestTypeOptionsItem);
    return this;
  }

   /**
   * Get interestTypeOptions
   * @return interestTypeOptions
  **/
  @Schema(description = "")
  public List<EnumOptionData> getInterestTypeOptions() {
    return interestTypeOptions;
  }

  public void setInterestTypeOptions(List<EnumOptionData> interestTypeOptions) {
    this.interestTypeOptions = interestTypeOptions;
  }

  public LoanProductData interestCalculationPeriodTypeOptions(List<EnumOptionData> interestCalculationPeriodTypeOptions) {
    this.interestCalculationPeriodTypeOptions = interestCalculationPeriodTypeOptions;
    return this;
  }

  public LoanProductData addInterestCalculationPeriodTypeOptionsItem(EnumOptionData interestCalculationPeriodTypeOptionsItem) {
    if (this.interestCalculationPeriodTypeOptions == null) {
      this.interestCalculationPeriodTypeOptions = new ArrayList<>();
    }
    this.interestCalculationPeriodTypeOptions.add(interestCalculationPeriodTypeOptionsItem);
    return this;
  }

   /**
   * Get interestCalculationPeriodTypeOptions
   * @return interestCalculationPeriodTypeOptions
  **/
  @Schema(description = "")
  public List<EnumOptionData> getInterestCalculationPeriodTypeOptions() {
    return interestCalculationPeriodTypeOptions;
  }

  public void setInterestCalculationPeriodTypeOptions(List<EnumOptionData> interestCalculationPeriodTypeOptions) {
    this.interestCalculationPeriodTypeOptions = interestCalculationPeriodTypeOptions;
  }

  public LoanProductData chargeOptions(List<ChargeData> chargeOptions) {
    this.chargeOptions = chargeOptions;
    return this;
  }

  public LoanProductData addChargeOptionsItem(ChargeData chargeOptionsItem) {
    if (this.chargeOptions == null) {
      this.chargeOptions = new ArrayList<>();
    }
    this.chargeOptions.add(chargeOptionsItem);
    return this;
  }

   /**
   * Get chargeOptions
   * @return chargeOptions
  **/
  @Schema(description = "")
  public List<ChargeData> getChargeOptions() {
    return chargeOptions;
  }

  public void setChargeOptions(List<ChargeData> chargeOptions) {
    this.chargeOptions = chargeOptions;
  }

  public LoanProductData multiDisburseLoan(Boolean multiDisburseLoan) {
    this.multiDisburseLoan = multiDisburseLoan;
    return this;
  }

   /**
   * Get multiDisburseLoan
   * @return multiDisburseLoan
  **/
  @Schema(description = "")
  public Boolean isMultiDisburseLoan() {
    return multiDisburseLoan;
  }

  public void setMultiDisburseLoan(Boolean multiDisburseLoan) {
    this.multiDisburseLoan = multiDisburseLoan;
  }

  public LoanProductData outstandingLoanBalance(BigDecimal outstandingLoanBalance) {
    this.outstandingLoanBalance = outstandingLoanBalance;
    return this;
  }

   /**
   * Get outstandingLoanBalance
   * @return outstandingLoanBalance
  **/
  @Schema(description = "")
  public BigDecimal getOutstandingLoanBalance() {
    return outstandingLoanBalance;
  }

  public void setOutstandingLoanBalance(BigDecimal outstandingLoanBalance) {
    this.outstandingLoanBalance = outstandingLoanBalance;
  }

  public LoanProductData equalAmortization(Boolean equalAmortization) {
    this.equalAmortization = equalAmortization;
    return this;
  }

   /**
   * Get equalAmortization
   * @return equalAmortization
  **/
  @Schema(description = "")
  public Boolean isEqualAmortization() {
    return equalAmortization;
  }

  public void setEqualAmortization(Boolean equalAmortization) {
    this.equalAmortization = equalAmortization;
  }

  public LoanProductData interestRecalculationEnabled(Boolean interestRecalculationEnabled) {
    this.interestRecalculationEnabled = interestRecalculationEnabled;
    return this;
  }

   /**
   * Get interestRecalculationEnabled
   * @return interestRecalculationEnabled
  **/
  @Schema(description = "")
  public Boolean isInterestRecalculationEnabled() {
    return interestRecalculationEnabled;
  }

  public void setInterestRecalculationEnabled(Boolean interestRecalculationEnabled) {
    this.interestRecalculationEnabled = interestRecalculationEnabled;
  }

  public LoanProductData compoundingToBePostedAsTransaction(Boolean compoundingToBePostedAsTransaction) {
    this.compoundingToBePostedAsTransaction = compoundingToBePostedAsTransaction;
    return this;
  }

   /**
   * Get compoundingToBePostedAsTransaction
   * @return compoundingToBePostedAsTransaction
  **/
  @Schema(description = "")
  public Boolean isCompoundingToBePostedAsTransaction() {
    return compoundingToBePostedAsTransaction;
  }

  public void setCompoundingToBePostedAsTransaction(Boolean compoundingToBePostedAsTransaction) {
    this.compoundingToBePostedAsTransaction = compoundingToBePostedAsTransaction;
  }

  public LoanProductData floatingInterestRateCalculationAllowed(Boolean floatingInterestRateCalculationAllowed) {
    this.floatingInterestRateCalculationAllowed = floatingInterestRateCalculationAllowed;
    return this;
  }

   /**
   * Get floatingInterestRateCalculationAllowed
   * @return floatingInterestRateCalculationAllowed
  **/
  @Schema(description = "")
  public Boolean isFloatingInterestRateCalculationAllowed() {
    return floatingInterestRateCalculationAllowed;
  }

  public void setFloatingInterestRateCalculationAllowed(Boolean floatingInterestRateCalculationAllowed) {
    this.floatingInterestRateCalculationAllowed = floatingInterestRateCalculationAllowed;
  }

  public LoanProductData linkedToFloatingInterestRates(Boolean linkedToFloatingInterestRates) {
    this.linkedToFloatingInterestRates = linkedToFloatingInterestRates;
    return this;
  }

   /**
   * Get linkedToFloatingInterestRates
   * @return linkedToFloatingInterestRates
  **/
  @Schema(description = "")
  public Boolean isLinkedToFloatingInterestRates() {
    return linkedToFloatingInterestRates;
  }

  public void setLinkedToFloatingInterestRates(Boolean linkedToFloatingInterestRates) {
    this.linkedToFloatingInterestRates = linkedToFloatingInterestRates;
  }

  public LoanProductData variableInstallmentsAllowed(Boolean variableInstallmentsAllowed) {
    this.variableInstallmentsAllowed = variableInstallmentsAllowed;
    return this;
  }

   /**
   * Get variableInstallmentsAllowed
   * @return variableInstallmentsAllowed
  **/
  @Schema(description = "")
  public Boolean isVariableInstallmentsAllowed() {
    return variableInstallmentsAllowed;
  }

  public void setVariableInstallmentsAllowed(Boolean variableInstallmentsAllowed) {
    this.variableInstallmentsAllowed = variableInstallmentsAllowed;
  }

  public LoanProductData getloanProductConfigurableAttributes(LoanProductConfigurableAttributes getloanProductConfigurableAttributes) {
    this.getloanProductConfigurableAttributes = getloanProductConfigurableAttributes;
    return this;
  }

   /**
   * Get getloanProductConfigurableAttributes
   * @return getloanProductConfigurableAttributes
  **/
  @Schema(description = "")
  public LoanProductConfigurableAttributes getGetloanProductConfigurableAttributes() {
    return getloanProductConfigurableAttributes;
  }

  public void setGetloanProductConfigurableAttributes(LoanProductConfigurableAttributes getloanProductConfigurableAttributes) {
    this.getloanProductConfigurableAttributes = getloanProductConfigurableAttributes;
  }

  public LoanProductData minimumGapBetweenInstallments(Integer minimumGapBetweenInstallments) {
    this.minimumGapBetweenInstallments = minimumGapBetweenInstallments;
    return this;
  }

   /**
   * Get minimumGapBetweenInstallments
   * @return minimumGapBetweenInstallments
  **/
  @Schema(description = "")
  public Integer getMinimumGapBetweenInstallments() {
    return minimumGapBetweenInstallments;
  }

  public void setMinimumGapBetweenInstallments(Integer minimumGapBetweenInstallments) {
    this.minimumGapBetweenInstallments = minimumGapBetweenInstallments;
  }

  public LoanProductData maximumGapBetweenInstallments(Integer maximumGapBetweenInstallments) {
    this.maximumGapBetweenInstallments = maximumGapBetweenInstallments;
    return this;
  }

   /**
   * Get maximumGapBetweenInstallments
   * @return maximumGapBetweenInstallments
  **/
  @Schema(description = "")
  public Integer getMaximumGapBetweenInstallments() {
    return maximumGapBetweenInstallments;
  }

  public void setMaximumGapBetweenInstallments(Integer maximumGapBetweenInstallments) {
    this.maximumGapBetweenInstallments = maximumGapBetweenInstallments;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoanProductData loanProductData = (LoanProductData) o;
    return Objects.equals(this.id, loanProductData.id) &&
        Objects.equals(this.name, loanProductData.name) &&
        Objects.equals(this.description, loanProductData.description) &&
        Objects.equals(this.fundId, loanProductData.fundId) &&
        Objects.equals(this.fundName, loanProductData.fundName) &&
        Objects.equals(this.startDate, loanProductData.startDate) &&
        Objects.equals(this.closeDate, loanProductData.closeDate) &&
        Objects.equals(this.currency, loanProductData.currency) &&
        Objects.equals(this.principal, loanProductData.principal) &&
        Objects.equals(this.minPrincipal, loanProductData.minPrincipal) &&
        Objects.equals(this.maxPrincipal, loanProductData.maxPrincipal) &&
        Objects.equals(this.numberOfRepayments, loanProductData.numberOfRepayments) &&
        Objects.equals(this.minNumberOfRepayments, loanProductData.minNumberOfRepayments) &&
        Objects.equals(this.maxNumberOfRepayments, loanProductData.maxNumberOfRepayments) &&
        Objects.equals(this.repaymentEvery, loanProductData.repaymentEvery) &&
        Objects.equals(this.repaymentFrequencyType, loanProductData.repaymentFrequencyType) &&
        Objects.equals(this.interestRatePerPeriod, loanProductData.interestRatePerPeriod) &&
        Objects.equals(this.minInterestRatePerPeriod, loanProductData.minInterestRatePerPeriod) &&
        Objects.equals(this.maxInterestRatePerPeriod, loanProductData.maxInterestRatePerPeriod) &&
        Objects.equals(this.interestRateFrequencyType, loanProductData.interestRateFrequencyType) &&
        Objects.equals(this.annualInterestRate, loanProductData.annualInterestRate) &&
        Objects.equals(this.interestRateDifferential, loanProductData.interestRateDifferential) &&
        Objects.equals(this.minDifferentialLendingRate, loanProductData.minDifferentialLendingRate) &&
        Objects.equals(this.defaultDifferentialLendingRate, loanProductData.defaultDifferentialLendingRate) &&
        Objects.equals(this.maxDifferentialLendingRate, loanProductData.maxDifferentialLendingRate) &&
        Objects.equals(this.amortizationType, loanProductData.amortizationType) &&
        Objects.equals(this.interestType, loanProductData.interestType) &&
        Objects.equals(this.interestCalculationPeriodType, loanProductData.interestCalculationPeriodType) &&
        Objects.equals(this.allowPartialPeriodInterestCalcualtion, loanProductData.allowPartialPeriodInterestCalcualtion) &&
        Objects.equals(this.inArrearsTolerance, loanProductData.inArrearsTolerance) &&
        Objects.equals(this.transactionProcessingStrategyId, loanProductData.transactionProcessingStrategyId) &&
        Objects.equals(this.transactionProcessingStrategyName, loanProductData.transactionProcessingStrategyName) &&
        Objects.equals(this.graceOnPrincipalPayment, loanProductData.graceOnPrincipalPayment) &&
        Objects.equals(this.recurringMoratoriumOnPrincipalPeriods, loanProductData.recurringMoratoriumOnPrincipalPeriods) &&
        Objects.equals(this.graceOnInterestPayment, loanProductData.graceOnInterestPayment) &&
        Objects.equals(this.graceOnInterestCharged, loanProductData.graceOnInterestCharged) &&
        Objects.equals(this.graceOnArrearsAgeing, loanProductData.graceOnArrearsAgeing) &&
        Objects.equals(this.daysInMonthType, loanProductData.daysInMonthType) &&
        Objects.equals(this.daysInYearType, loanProductData.daysInYearType) &&
        Objects.equals(this.interestRecalculationData, loanProductData.interestRecalculationData) &&
        Objects.equals(this.principalVariationsForBorrowerCycle, loanProductData.principalVariationsForBorrowerCycle) &&
        Objects.equals(this.interestRateVariationsForBorrowerCycle, loanProductData.interestRateVariationsForBorrowerCycle) &&
        Objects.equals(this.numberOfRepaymentVariationsForBorrowerCycle, loanProductData.numberOfRepaymentVariationsForBorrowerCycle) &&
        Objects.equals(this.fundOptions, loanProductData.fundOptions) &&
        Objects.equals(this.repaymentFrequencyTypeOptions, loanProductData.repaymentFrequencyTypeOptions) &&
        Objects.equals(this.interestRateFrequencyTypeOptions, loanProductData.interestRateFrequencyTypeOptions) &&
        Objects.equals(this.amortizationTypeOptions, loanProductData.amortizationTypeOptions) &&
        Objects.equals(this.interestTypeOptions, loanProductData.interestTypeOptions) &&
        Objects.equals(this.interestCalculationPeriodTypeOptions, loanProductData.interestCalculationPeriodTypeOptions) &&
        Objects.equals(this.chargeOptions, loanProductData.chargeOptions) &&
        Objects.equals(this.multiDisburseLoan, loanProductData.multiDisburseLoan) &&
        Objects.equals(this.outstandingLoanBalance, loanProductData.outstandingLoanBalance) &&
        Objects.equals(this.equalAmortization, loanProductData.equalAmortization) &&
        Objects.equals(this.interestRecalculationEnabled, loanProductData.interestRecalculationEnabled) &&
        Objects.equals(this.compoundingToBePostedAsTransaction, loanProductData.compoundingToBePostedAsTransaction) &&
        Objects.equals(this.floatingInterestRateCalculationAllowed, loanProductData.floatingInterestRateCalculationAllowed) &&
        Objects.equals(this.linkedToFloatingInterestRates, loanProductData.linkedToFloatingInterestRates) &&
        Objects.equals(this.variableInstallmentsAllowed, loanProductData.variableInstallmentsAllowed) &&
        Objects.equals(this.getloanProductConfigurableAttributes, loanProductData.getloanProductConfigurableAttributes) &&
        Objects.equals(this.minimumGapBetweenInstallments, loanProductData.minimumGapBetweenInstallments) &&
        Objects.equals(this.maximumGapBetweenInstallments, loanProductData.maximumGapBetweenInstallments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, fundId, fundName, startDate, closeDate, currency, principal, minPrincipal, maxPrincipal, numberOfRepayments, minNumberOfRepayments, maxNumberOfRepayments, repaymentEvery, repaymentFrequencyType, interestRatePerPeriod, minInterestRatePerPeriod, maxInterestRatePerPeriod, interestRateFrequencyType, annualInterestRate, interestRateDifferential, minDifferentialLendingRate, defaultDifferentialLendingRate, maxDifferentialLendingRate, amortizationType, interestType, interestCalculationPeriodType, allowPartialPeriodInterestCalcualtion, inArrearsTolerance, transactionProcessingStrategyId, transactionProcessingStrategyName, graceOnPrincipalPayment, recurringMoratoriumOnPrincipalPeriods, graceOnInterestPayment, graceOnInterestCharged, graceOnArrearsAgeing, daysInMonthType, daysInYearType, interestRecalculationData, principalVariationsForBorrowerCycle, interestRateVariationsForBorrowerCycle, numberOfRepaymentVariationsForBorrowerCycle, fundOptions, repaymentFrequencyTypeOptions, interestRateFrequencyTypeOptions, amortizationTypeOptions, interestTypeOptions, interestCalculationPeriodTypeOptions, chargeOptions, multiDisburseLoan, outstandingLoanBalance, equalAmortization, interestRecalculationEnabled, compoundingToBePostedAsTransaction, floatingInterestRateCalculationAllowed, linkedToFloatingInterestRates, variableInstallmentsAllowed, getloanProductConfigurableAttributes, minimumGapBetweenInstallments, maximumGapBetweenInstallments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoanProductData {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fundId: ").append(toIndentedString(fundId)).append("\n");
    sb.append("    fundName: ").append(toIndentedString(fundName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    closeDate: ").append(toIndentedString(closeDate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    minPrincipal: ").append(toIndentedString(minPrincipal)).append("\n");
    sb.append("    maxPrincipal: ").append(toIndentedString(maxPrincipal)).append("\n");
    sb.append("    numberOfRepayments: ").append(toIndentedString(numberOfRepayments)).append("\n");
    sb.append("    minNumberOfRepayments: ").append(toIndentedString(minNumberOfRepayments)).append("\n");
    sb.append("    maxNumberOfRepayments: ").append(toIndentedString(maxNumberOfRepayments)).append("\n");
    sb.append("    repaymentEvery: ").append(toIndentedString(repaymentEvery)).append("\n");
    sb.append("    repaymentFrequencyType: ").append(toIndentedString(repaymentFrequencyType)).append("\n");
    sb.append("    interestRatePerPeriod: ").append(toIndentedString(interestRatePerPeriod)).append("\n");
    sb.append("    minInterestRatePerPeriod: ").append(toIndentedString(minInterestRatePerPeriod)).append("\n");
    sb.append("    maxInterestRatePerPeriod: ").append(toIndentedString(maxInterestRatePerPeriod)).append("\n");
    sb.append("    interestRateFrequencyType: ").append(toIndentedString(interestRateFrequencyType)).append("\n");
    sb.append("    annualInterestRate: ").append(toIndentedString(annualInterestRate)).append("\n");
    sb.append("    interestRateDifferential: ").append(toIndentedString(interestRateDifferential)).append("\n");
    sb.append("    minDifferentialLendingRate: ").append(toIndentedString(minDifferentialLendingRate)).append("\n");
    sb.append("    defaultDifferentialLendingRate: ").append(toIndentedString(defaultDifferentialLendingRate)).append("\n");
    sb.append("    maxDifferentialLendingRate: ").append(toIndentedString(maxDifferentialLendingRate)).append("\n");
    sb.append("    amortizationType: ").append(toIndentedString(amortizationType)).append("\n");
    sb.append("    interestType: ").append(toIndentedString(interestType)).append("\n");
    sb.append("    interestCalculationPeriodType: ").append(toIndentedString(interestCalculationPeriodType)).append("\n");
    sb.append("    allowPartialPeriodInterestCalcualtion: ").append(toIndentedString(allowPartialPeriodInterestCalcualtion)).append("\n");
    sb.append("    inArrearsTolerance: ").append(toIndentedString(inArrearsTolerance)).append("\n");
    sb.append("    transactionProcessingStrategyId: ").append(toIndentedString(transactionProcessingStrategyId)).append("\n");
    sb.append("    transactionProcessingStrategyName: ").append(toIndentedString(transactionProcessingStrategyName)).append("\n");
    sb.append("    graceOnPrincipalPayment: ").append(toIndentedString(graceOnPrincipalPayment)).append("\n");
    sb.append("    recurringMoratoriumOnPrincipalPeriods: ").append(toIndentedString(recurringMoratoriumOnPrincipalPeriods)).append("\n");
    sb.append("    graceOnInterestPayment: ").append(toIndentedString(graceOnInterestPayment)).append("\n");
    sb.append("    graceOnInterestCharged: ").append(toIndentedString(graceOnInterestCharged)).append("\n");
    sb.append("    graceOnArrearsAgeing: ").append(toIndentedString(graceOnArrearsAgeing)).append("\n");
    sb.append("    daysInMonthType: ").append(toIndentedString(daysInMonthType)).append("\n");
    sb.append("    daysInYearType: ").append(toIndentedString(daysInYearType)).append("\n");
    sb.append("    interestRecalculationData: ").append(toIndentedString(interestRecalculationData)).append("\n");
    sb.append("    principalVariationsForBorrowerCycle: ").append(toIndentedString(principalVariationsForBorrowerCycle)).append("\n");
    sb.append("    interestRateVariationsForBorrowerCycle: ").append(toIndentedString(interestRateVariationsForBorrowerCycle)).append("\n");
    sb.append("    numberOfRepaymentVariationsForBorrowerCycle: ").append(toIndentedString(numberOfRepaymentVariationsForBorrowerCycle)).append("\n");
    sb.append("    fundOptions: ").append(toIndentedString(fundOptions)).append("\n");
    sb.append("    repaymentFrequencyTypeOptions: ").append(toIndentedString(repaymentFrequencyTypeOptions)).append("\n");
    sb.append("    interestRateFrequencyTypeOptions: ").append(toIndentedString(interestRateFrequencyTypeOptions)).append("\n");
    sb.append("    amortizationTypeOptions: ").append(toIndentedString(amortizationTypeOptions)).append("\n");
    sb.append("    interestTypeOptions: ").append(toIndentedString(interestTypeOptions)).append("\n");
    sb.append("    interestCalculationPeriodTypeOptions: ").append(toIndentedString(interestCalculationPeriodTypeOptions)).append("\n");
    sb.append("    chargeOptions: ").append(toIndentedString(chargeOptions)).append("\n");
    sb.append("    multiDisburseLoan: ").append(toIndentedString(multiDisburseLoan)).append("\n");
    sb.append("    outstandingLoanBalance: ").append(toIndentedString(outstandingLoanBalance)).append("\n");
    sb.append("    equalAmortization: ").append(toIndentedString(equalAmortization)).append("\n");
    sb.append("    interestRecalculationEnabled: ").append(toIndentedString(interestRecalculationEnabled)).append("\n");
    sb.append("    compoundingToBePostedAsTransaction: ").append(toIndentedString(compoundingToBePostedAsTransaction)).append("\n");
    sb.append("    floatingInterestRateCalculationAllowed: ").append(toIndentedString(floatingInterestRateCalculationAllowed)).append("\n");
    sb.append("    linkedToFloatingInterestRates: ").append(toIndentedString(linkedToFloatingInterestRates)).append("\n");
    sb.append("    variableInstallmentsAllowed: ").append(toIndentedString(variableInstallmentsAllowed)).append("\n");
    sb.append("    getloanProductConfigurableAttributes: ").append(toIndentedString(getloanProductConfigurableAttributes)).append("\n");
    sb.append("    minimumGapBetweenInstallments: ").append(toIndentedString(minimumGapBetweenInstallments)).append("\n");
    sb.append("    maximumGapBetweenInstallments: ").append(toIndentedString(maximumGapBetweenInstallments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
