/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.fineract.client.models.ResultsetColumnHeaderData;
/**
 * PostDataTablesRequest
 */
@Schema(description = "PostDataTablesRequest")

public class PostDataTablesRequest {
  @SerializedName("applicationTableName")
  private String applicationTableName = null;

  @SerializedName("registeredTableName")
  private String registeredTableName = null;

  @SerializedName("multiRow")
  private Boolean multiRow = null;

  @SerializedName("columnHeaderData")
  private List<ResultsetColumnHeaderData> columnHeaderData = null;

  public PostDataTablesRequest applicationTableName(String applicationTableName) {
    this.applicationTableName = applicationTableName;
    return this;
  }

   /**
   * Get applicationTableName
   * @return applicationTableName
  **/
  @Schema(example = "m_client", description = "")
  public String getApplicationTableName() {
    return applicationTableName;
  }

  public void setApplicationTableName(String applicationTableName) {
    this.applicationTableName = applicationTableName;
  }

  public PostDataTablesRequest registeredTableName(String registeredTableName) {
    this.registeredTableName = registeredTableName;
    return this;
  }

   /**
   * Get registeredTableName
   * @return registeredTableName
  **/
  @Schema(example = "extra_client_details", description = "")
  public String getRegisteredTableName() {
    return registeredTableName;
  }

  public void setRegisteredTableName(String registeredTableName) {
    this.registeredTableName = registeredTableName;
  }

  public PostDataTablesRequest multiRow(Boolean multiRow) {
    this.multiRow = multiRow;
    return this;
  }

   /**
   * Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.
   * @return multiRow
  **/
  @Schema(example = "true", description = "Allows to create multiple entries in the Data Table. Optional, defaults to false. If this property is not provided Data Table will allow only one entry.")
  public Boolean isMultiRow() {
    return multiRow;
  }

  public void setMultiRow(Boolean multiRow) {
    this.multiRow = multiRow;
  }

  public PostDataTablesRequest columnHeaderData(List<ResultsetColumnHeaderData> columnHeaderData) {
    this.columnHeaderData = columnHeaderData;
    return this;
  }

  public PostDataTablesRequest addColumnHeaderDataItem(ResultsetColumnHeaderData columnHeaderDataItem) {
    if (this.columnHeaderData == null) {
      this.columnHeaderData = new ArrayList<>();
    }
    this.columnHeaderData.add(columnHeaderDataItem);
    return this;
  }

   /**
   * Get columnHeaderData
   * @return columnHeaderData
  **/
  @Schema(description = "")
  public List<ResultsetColumnHeaderData> getColumnHeaderData() {
    return columnHeaderData;
  }

  public void setColumnHeaderData(List<ResultsetColumnHeaderData> columnHeaderData) {
    this.columnHeaderData = columnHeaderData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostDataTablesRequest postDataTablesRequest = (PostDataTablesRequest) o;
    return Objects.equals(this.applicationTableName, postDataTablesRequest.applicationTableName) &&
        Objects.equals(this.registeredTableName, postDataTablesRequest.registeredTableName) &&
        Objects.equals(this.multiRow, postDataTablesRequest.multiRow) &&
        Objects.equals(this.columnHeaderData, postDataTablesRequest.columnHeaderData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationTableName, registeredTableName, multiRow, columnHeaderData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostDataTablesRequest {\n");
    
    sb.append("    applicationTableName: ").append(toIndentedString(applicationTableName)).append("\n");
    sb.append("    registeredTableName: ").append(toIndentedString(registeredTableName)).append("\n");
    sb.append("    multiRow: ").append(toIndentedString(multiRow)).append("\n");
    sb.append("    columnHeaderData: ").append(toIndentedString(columnHeaderData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
