/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.apache.fineract.client.models.Client;
import org.apache.fineract.client.models.Group;
import org.apache.fineract.client.models.GroupLevel;
import org.apache.fineract.client.models.Office;
import org.apache.fineract.client.models.Staff;
/**
 * Group
 */


public class Group {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("office")
  private Office office = null;

  @SerializedName("staff")
  private Staff staff = null;

  @SerializedName("parent")
  private Group parent = null;

  @SerializedName("groupLevel")
  private GroupLevel groupLevel = null;

  @SerializedName("groupMembers")
  private List<Group> groupMembers = null;

  @SerializedName("clientMembers")
  private List<Client> clientMembers = null;

  @SerializedName("submittedOnDate")
  private LocalDate submittedOnDate = null;

  @SerializedName("accountNumberRequiresAutoGeneration")
  private Boolean accountNumberRequiresAutoGeneration = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("pending")
  private Boolean pending = null;

  @SerializedName("group")
  private Boolean group = null;

  @SerializedName("transferInProgress")
  private Boolean transferInProgress = null;

  @SerializedName("transferOnHold")
  private Boolean transferOnHold = null;

  @SerializedName("notActive")
  private Boolean notActive = null;

  @SerializedName("transferInProgressOrOnHold")
  private Boolean transferInProgressOrOnHold = null;

  @SerializedName("notPending")
  private Boolean notPending = null;

  @SerializedName("activationLocalDate")
  private LocalDate activationLocalDate = null;

  @SerializedName("center")
  private Boolean center = null;

  @SerializedName("childGroup")
  private Boolean childGroup = null;

  @SerializedName("activeClientMembers")
  private List<Client> activeClientMembers = null;

  @SerializedName("closed")
  private Boolean closed = null;

  @SerializedName("new")
  private Boolean _new = null;

  public Group id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Group office(Office office) {
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @Schema(description = "")
  public Office getOffice() {
    return office;
  }

  public void setOffice(Office office) {
    this.office = office;
  }

  public Group staff(Staff staff) {
    this.staff = staff;
    return this;
  }

   /**
   * Get staff
   * @return staff
  **/
  @Schema(description = "")
  public Staff getStaff() {
    return staff;
  }

  public void setStaff(Staff staff) {
    this.staff = staff;
  }

  public Group parent(Group parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public Group getParent() {
    return parent;
  }

  public void setParent(Group parent) {
    this.parent = parent;
  }

  public Group groupLevel(GroupLevel groupLevel) {
    this.groupLevel = groupLevel;
    return this;
  }

   /**
   * Get groupLevel
   * @return groupLevel
  **/
  @Schema(description = "")
  public GroupLevel getGroupLevel() {
    return groupLevel;
  }

  public void setGroupLevel(GroupLevel groupLevel) {
    this.groupLevel = groupLevel;
  }

  public Group groupMembers(List<Group> groupMembers) {
    this.groupMembers = groupMembers;
    return this;
  }

  public Group addGroupMembersItem(Group groupMembersItem) {
    if (this.groupMembers == null) {
      this.groupMembers = new ArrayList<>();
    }
    this.groupMembers.add(groupMembersItem);
    return this;
  }

   /**
   * Get groupMembers
   * @return groupMembers
  **/
  @Schema(description = "")
  public List<Group> getGroupMembers() {
    return groupMembers;
  }

  public void setGroupMembers(List<Group> groupMembers) {
    this.groupMembers = groupMembers;
  }

  public Group clientMembers(List<Client> clientMembers) {
    this.clientMembers = clientMembers;
    return this;
  }

  public Group addClientMembersItem(Client clientMembersItem) {
    if (this.clientMembers == null) {
      this.clientMembers = new ArrayList<>();
    }
    this.clientMembers.add(clientMembersItem);
    return this;
  }

   /**
   * Get clientMembers
   * @return clientMembers
  **/
  @Schema(description = "")
  public List<Client> getClientMembers() {
    return clientMembers;
  }

  public void setClientMembers(List<Client> clientMembers) {
    this.clientMembers = clientMembers;
  }

  public Group submittedOnDate(LocalDate submittedOnDate) {
    this.submittedOnDate = submittedOnDate;
    return this;
  }

   /**
   * Get submittedOnDate
   * @return submittedOnDate
  **/
  @Schema(description = "")
  public LocalDate getSubmittedOnDate() {
    return submittedOnDate;
  }

  public void setSubmittedOnDate(LocalDate submittedOnDate) {
    this.submittedOnDate = submittedOnDate;
  }

  public Group accountNumberRequiresAutoGeneration(Boolean accountNumberRequiresAutoGeneration) {
    this.accountNumberRequiresAutoGeneration = accountNumberRequiresAutoGeneration;
    return this;
  }

   /**
   * Get accountNumberRequiresAutoGeneration
   * @return accountNumberRequiresAutoGeneration
  **/
  @Schema(description = "")
  public Boolean isAccountNumberRequiresAutoGeneration() {
    return accountNumberRequiresAutoGeneration;
  }

  public void setAccountNumberRequiresAutoGeneration(Boolean accountNumberRequiresAutoGeneration) {
    this.accountNumberRequiresAutoGeneration = accountNumberRequiresAutoGeneration;
  }

  public Group active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @Schema(description = "")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Group pending(Boolean pending) {
    this.pending = pending;
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @Schema(description = "")
  public Boolean isPending() {
    return pending;
  }

  public void setPending(Boolean pending) {
    this.pending = pending;
  }

  public Group group(Boolean group) {
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @Schema(description = "")
  public Boolean isGroup() {
    return group;
  }

  public void setGroup(Boolean group) {
    this.group = group;
  }

  public Group transferInProgress(Boolean transferInProgress) {
    this.transferInProgress = transferInProgress;
    return this;
  }

   /**
   * Get transferInProgress
   * @return transferInProgress
  **/
  @Schema(description = "")
  public Boolean isTransferInProgress() {
    return transferInProgress;
  }

  public void setTransferInProgress(Boolean transferInProgress) {
    this.transferInProgress = transferInProgress;
  }

  public Group transferOnHold(Boolean transferOnHold) {
    this.transferOnHold = transferOnHold;
    return this;
  }

   /**
   * Get transferOnHold
   * @return transferOnHold
  **/
  @Schema(description = "")
  public Boolean isTransferOnHold() {
    return transferOnHold;
  }

  public void setTransferOnHold(Boolean transferOnHold) {
    this.transferOnHold = transferOnHold;
  }

  public Group notActive(Boolean notActive) {
    this.notActive = notActive;
    return this;
  }

   /**
   * Get notActive
   * @return notActive
  **/
  @Schema(description = "")
  public Boolean isNotActive() {
    return notActive;
  }

  public void setNotActive(Boolean notActive) {
    this.notActive = notActive;
  }

  public Group transferInProgressOrOnHold(Boolean transferInProgressOrOnHold) {
    this.transferInProgressOrOnHold = transferInProgressOrOnHold;
    return this;
  }

   /**
   * Get transferInProgressOrOnHold
   * @return transferInProgressOrOnHold
  **/
  @Schema(description = "")
  public Boolean isTransferInProgressOrOnHold() {
    return transferInProgressOrOnHold;
  }

  public void setTransferInProgressOrOnHold(Boolean transferInProgressOrOnHold) {
    this.transferInProgressOrOnHold = transferInProgressOrOnHold;
  }

  public Group notPending(Boolean notPending) {
    this.notPending = notPending;
    return this;
  }

   /**
   * Get notPending
   * @return notPending
  **/
  @Schema(description = "")
  public Boolean isNotPending() {
    return notPending;
  }

  public void setNotPending(Boolean notPending) {
    this.notPending = notPending;
  }

  public Group activationLocalDate(LocalDate activationLocalDate) {
    this.activationLocalDate = activationLocalDate;
    return this;
  }

   /**
   * Get activationLocalDate
   * @return activationLocalDate
  **/
  @Schema(description = "")
  public LocalDate getActivationLocalDate() {
    return activationLocalDate;
  }

  public void setActivationLocalDate(LocalDate activationLocalDate) {
    this.activationLocalDate = activationLocalDate;
  }

  public Group center(Boolean center) {
    this.center = center;
    return this;
  }

   /**
   * Get center
   * @return center
  **/
  @Schema(description = "")
  public Boolean isCenter() {
    return center;
  }

  public void setCenter(Boolean center) {
    this.center = center;
  }

  public Group childGroup(Boolean childGroup) {
    this.childGroup = childGroup;
    return this;
  }

   /**
   * Get childGroup
   * @return childGroup
  **/
  @Schema(description = "")
  public Boolean isChildGroup() {
    return childGroup;
  }

  public void setChildGroup(Boolean childGroup) {
    this.childGroup = childGroup;
  }

  public Group activeClientMembers(List<Client> activeClientMembers) {
    this.activeClientMembers = activeClientMembers;
    return this;
  }

  public Group addActiveClientMembersItem(Client activeClientMembersItem) {
    if (this.activeClientMembers == null) {
      this.activeClientMembers = new ArrayList<>();
    }
    this.activeClientMembers.add(activeClientMembersItem);
    return this;
  }

   /**
   * Get activeClientMembers
   * @return activeClientMembers
  **/
  @Schema(description = "")
  public List<Client> getActiveClientMembers() {
    return activeClientMembers;
  }

  public void setActiveClientMembers(List<Client> activeClientMembers) {
    this.activeClientMembers = activeClientMembers;
  }

  public Group closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @Schema(description = "")
  public Boolean isClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }

  public Group _new(Boolean _new) {
    this._new = _new;
    return this;
  }

   /**
   * Get _new
   * @return _new
  **/
  @Schema(description = "")
  public Boolean isNew() {
    return _new;
  }

  public void setNew(Boolean _new) {
    this._new = _new;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.id, group.id) &&
        Objects.equals(this.office, group.office) &&
        Objects.equals(this.staff, group.staff) &&
        Objects.equals(this.parent, group.parent) &&
        Objects.equals(this.groupLevel, group.groupLevel) &&
        Objects.equals(this.groupMembers, group.groupMembers) &&
        Objects.equals(this.clientMembers, group.clientMembers) &&
        Objects.equals(this.submittedOnDate, group.submittedOnDate) &&
        Objects.equals(this.accountNumberRequiresAutoGeneration, group.accountNumberRequiresAutoGeneration) &&
        Objects.equals(this.active, group.active) &&
        Objects.equals(this.pending, group.pending) &&
        Objects.equals(this.group, group.group) &&
        Objects.equals(this.transferInProgress, group.transferInProgress) &&
        Objects.equals(this.transferOnHold, group.transferOnHold) &&
        Objects.equals(this.notActive, group.notActive) &&
        Objects.equals(this.transferInProgressOrOnHold, group.transferInProgressOrOnHold) &&
        Objects.equals(this.notPending, group.notPending) &&
        Objects.equals(this.activationLocalDate, group.activationLocalDate) &&
        Objects.equals(this.center, group.center) &&
        Objects.equals(this.childGroup, group.childGroup) &&
        Objects.equals(this.activeClientMembers, group.activeClientMembers) &&
        Objects.equals(this.closed, group.closed) &&
        Objects.equals(this._new, group._new);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, office, staff, parent, groupLevel, groupMembers, clientMembers, submittedOnDate, accountNumberRequiresAutoGeneration, active, pending, group, transferInProgress, transferOnHold, notActive, transferInProgressOrOnHold, notPending, activationLocalDate, center, childGroup, activeClientMembers, closed, _new);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    staff: ").append(toIndentedString(staff)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    groupLevel: ").append(toIndentedString(groupLevel)).append("\n");
    sb.append("    groupMembers: ").append(toIndentedString(groupMembers)).append("\n");
    sb.append("    clientMembers: ").append(toIndentedString(clientMembers)).append("\n");
    sb.append("    submittedOnDate: ").append(toIndentedString(submittedOnDate)).append("\n");
    sb.append("    accountNumberRequiresAutoGeneration: ").append(toIndentedString(accountNumberRequiresAutoGeneration)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    transferInProgress: ").append(toIndentedString(transferInProgress)).append("\n");
    sb.append("    transferOnHold: ").append(toIndentedString(transferOnHold)).append("\n");
    sb.append("    notActive: ").append(toIndentedString(notActive)).append("\n");
    sb.append("    transferInProgressOrOnHold: ").append(toIndentedString(transferInProgressOrOnHold)).append("\n");
    sb.append("    notPending: ").append(toIndentedString(notPending)).append("\n");
    sb.append("    activationLocalDate: ").append(toIndentedString(activationLocalDate)).append("\n");
    sb.append("    center: ").append(toIndentedString(center)).append("\n");
    sb.append("    childGroup: ").append(toIndentedString(childGroup)).append("\n");
    sb.append("    activeClientMembers: ").append(toIndentedString(activeClientMembers)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    _new: ").append(toIndentedString(_new)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
