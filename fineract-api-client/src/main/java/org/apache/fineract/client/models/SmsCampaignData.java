/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.apache.fineract.client.models.EnumOptionData;
/**
 * SmsCampaignData
 */


public class SmsCampaignData {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("campaignName")
  private String campaignName = null;

  @SerializedName("campaignType")
  private EnumOptionData campaignType = null;

  @SerializedName("runReportId")
  private Long runReportId = null;

  @SerializedName("reportName")
  private String reportName = null;

  @SerializedName("paramValue")
  private String paramValue = null;

  @SerializedName("campaignStatus")
  private EnumOptionData campaignStatus = null;

  @SerializedName("nextTriggerDate")
  private OffsetDateTime nextTriggerDate = null;

  @SerializedName("lastTriggerDate")
  private LocalDate lastTriggerDate = null;

  @SerializedName("recurrenceStartDate")
  private OffsetDateTime recurrenceStartDate = null;

  @SerializedName("recurrence")
  private String recurrence = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("notification")
  private Boolean notification = null;

  public SmsCampaignData id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public SmsCampaignData campaignName(String campaignName) {
    this.campaignName = campaignName;
    return this;
  }

   /**
   * Get campaignName
   * @return campaignName
  **/
  @Schema(description = "")
  public String getCampaignName() {
    return campaignName;
  }

  public void setCampaignName(String campaignName) {
    this.campaignName = campaignName;
  }

  public SmsCampaignData campaignType(EnumOptionData campaignType) {
    this.campaignType = campaignType;
    return this;
  }

   /**
   * Get campaignType
   * @return campaignType
  **/
  @Schema(description = "")
  public EnumOptionData getCampaignType() {
    return campaignType;
  }

  public void setCampaignType(EnumOptionData campaignType) {
    this.campaignType = campaignType;
  }

  public SmsCampaignData runReportId(Long runReportId) {
    this.runReportId = runReportId;
    return this;
  }

   /**
   * Get runReportId
   * @return runReportId
  **/
  @Schema(description = "")
  public Long getRunReportId() {
    return runReportId;
  }

  public void setRunReportId(Long runReportId) {
    this.runReportId = runReportId;
  }

  public SmsCampaignData reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

   /**
   * Get reportName
   * @return reportName
  **/
  @Schema(description = "")
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }

  public SmsCampaignData paramValue(String paramValue) {
    this.paramValue = paramValue;
    return this;
  }

   /**
   * Get paramValue
   * @return paramValue
  **/
  @Schema(description = "")
  public String getParamValue() {
    return paramValue;
  }

  public void setParamValue(String paramValue) {
    this.paramValue = paramValue;
  }

  public SmsCampaignData campaignStatus(EnumOptionData campaignStatus) {
    this.campaignStatus = campaignStatus;
    return this;
  }

   /**
   * Get campaignStatus
   * @return campaignStatus
  **/
  @Schema(description = "")
  public EnumOptionData getCampaignStatus() {
    return campaignStatus;
  }

  public void setCampaignStatus(EnumOptionData campaignStatus) {
    this.campaignStatus = campaignStatus;
  }

  public SmsCampaignData nextTriggerDate(OffsetDateTime nextTriggerDate) {
    this.nextTriggerDate = nextTriggerDate;
    return this;
  }

   /**
   * Get nextTriggerDate
   * @return nextTriggerDate
  **/
  @Schema(description = "")
  public OffsetDateTime getNextTriggerDate() {
    return nextTriggerDate;
  }

  public void setNextTriggerDate(OffsetDateTime nextTriggerDate) {
    this.nextTriggerDate = nextTriggerDate;
  }

  public SmsCampaignData lastTriggerDate(LocalDate lastTriggerDate) {
    this.lastTriggerDate = lastTriggerDate;
    return this;
  }

   /**
   * Get lastTriggerDate
   * @return lastTriggerDate
  **/
  @Schema(description = "")
  public LocalDate getLastTriggerDate() {
    return lastTriggerDate;
  }

  public void setLastTriggerDate(LocalDate lastTriggerDate) {
    this.lastTriggerDate = lastTriggerDate;
  }

  public SmsCampaignData recurrenceStartDate(OffsetDateTime recurrenceStartDate) {
    this.recurrenceStartDate = recurrenceStartDate;
    return this;
  }

   /**
   * Get recurrenceStartDate
   * @return recurrenceStartDate
  **/
  @Schema(description = "")
  public OffsetDateTime getRecurrenceStartDate() {
    return recurrenceStartDate;
  }

  public void setRecurrenceStartDate(OffsetDateTime recurrenceStartDate) {
    this.recurrenceStartDate = recurrenceStartDate;
  }

  public SmsCampaignData recurrence(String recurrence) {
    this.recurrence = recurrence;
    return this;
  }

   /**
   * Get recurrence
   * @return recurrence
  **/
  @Schema(description = "")
  public String getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(String recurrence) {
    this.recurrence = recurrence;
  }

  public SmsCampaignData message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public SmsCampaignData notification(Boolean notification) {
    this.notification = notification;
    return this;
  }

   /**
   * Get notification
   * @return notification
  **/
  @Schema(description = "")
  public Boolean isNotification() {
    return notification;
  }

  public void setNotification(Boolean notification) {
    this.notification = notification;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmsCampaignData smsCampaignData = (SmsCampaignData) o;
    return Objects.equals(this.id, smsCampaignData.id) &&
        Objects.equals(this.campaignName, smsCampaignData.campaignName) &&
        Objects.equals(this.campaignType, smsCampaignData.campaignType) &&
        Objects.equals(this.runReportId, smsCampaignData.runReportId) &&
        Objects.equals(this.reportName, smsCampaignData.reportName) &&
        Objects.equals(this.paramValue, smsCampaignData.paramValue) &&
        Objects.equals(this.campaignStatus, smsCampaignData.campaignStatus) &&
        Objects.equals(this.nextTriggerDate, smsCampaignData.nextTriggerDate) &&
        Objects.equals(this.lastTriggerDate, smsCampaignData.lastTriggerDate) &&
        Objects.equals(this.recurrenceStartDate, smsCampaignData.recurrenceStartDate) &&
        Objects.equals(this.recurrence, smsCampaignData.recurrence) &&
        Objects.equals(this.message, smsCampaignData.message) &&
        Objects.equals(this.notification, smsCampaignData.notification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, campaignName, campaignType, runReportId, reportName, paramValue, campaignStatus, nextTriggerDate, lastTriggerDate, recurrenceStartDate, recurrence, message, notification);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmsCampaignData {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    campaignName: ").append(toIndentedString(campaignName)).append("\n");
    sb.append("    campaignType: ").append(toIndentedString(campaignType)).append("\n");
    sb.append("    runReportId: ").append(toIndentedString(runReportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    paramValue: ").append(toIndentedString(paramValue)).append("\n");
    sb.append("    campaignStatus: ").append(toIndentedString(campaignStatus)).append("\n");
    sb.append("    nextTriggerDate: ").append(toIndentedString(nextTriggerDate)).append("\n");
    sb.append("    lastTriggerDate: ").append(toIndentedString(lastTriggerDate)).append("\n");
    sb.append("    recurrenceStartDate: ").append(toIndentedString(recurrenceStartDate)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
