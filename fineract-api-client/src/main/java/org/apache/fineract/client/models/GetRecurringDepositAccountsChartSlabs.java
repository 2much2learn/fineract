/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.apache.fineract.client.models.GetRecurringDepositAccountsAccountChartCurrency;
import org.apache.fineract.client.models.GetRecurringDepositAccountsPeriodType;
/**
 * GetRecurringDepositAccountsChartSlabs
 */


public class GetRecurringDepositAccountsChartSlabs {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("periodType")
  private GetRecurringDepositAccountsPeriodType periodType = null;

  @SerializedName("fromPeriod")
  private Integer fromPeriod = null;

  @SerializedName("toPeriod")
  private Integer toPeriod = null;

  @SerializedName("annualInterestRate")
  private Double annualInterestRate = null;

  @SerializedName("currency")
  private GetRecurringDepositAccountsAccountChartCurrency currency = null;

  public GetRecurringDepositAccountsChartSlabs id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(example = "13", description = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public GetRecurringDepositAccountsChartSlabs periodType(GetRecurringDepositAccountsPeriodType periodType) {
    this.periodType = periodType;
    return this;
  }

   /**
   * Get periodType
   * @return periodType
  **/
  @Schema(description = "")
  public GetRecurringDepositAccountsPeriodType getPeriodType() {
    return periodType;
  }

  public void setPeriodType(GetRecurringDepositAccountsPeriodType periodType) {
    this.periodType = periodType;
  }

  public GetRecurringDepositAccountsChartSlabs fromPeriod(Integer fromPeriod) {
    this.fromPeriod = fromPeriod;
    return this;
  }

   /**
   * Get fromPeriod
   * @return fromPeriod
  **/
  @Schema(example = "181", description = "")
  public Integer getFromPeriod() {
    return fromPeriod;
  }

  public void setFromPeriod(Integer fromPeriod) {
    this.fromPeriod = fromPeriod;
  }

  public GetRecurringDepositAccountsChartSlabs toPeriod(Integer toPeriod) {
    this.toPeriod = toPeriod;
    return this;
  }

   /**
   * Get toPeriod
   * @return toPeriod
  **/
  @Schema(example = "365", description = "")
  public Integer getToPeriod() {
    return toPeriod;
  }

  public void setToPeriod(Integer toPeriod) {
    this.toPeriod = toPeriod;
  }

  public GetRecurringDepositAccountsChartSlabs annualInterestRate(Double annualInterestRate) {
    this.annualInterestRate = annualInterestRate;
    return this;
  }

   /**
   * Get annualInterestRate
   * @return annualInterestRate
  **/
  @Schema(example = "5.5", description = "")
  public Double getAnnualInterestRate() {
    return annualInterestRate;
  }

  public void setAnnualInterestRate(Double annualInterestRate) {
    this.annualInterestRate = annualInterestRate;
  }

  public GetRecurringDepositAccountsChartSlabs currency(GetRecurringDepositAccountsAccountChartCurrency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @Schema(description = "")
  public GetRecurringDepositAccountsAccountChartCurrency getCurrency() {
    return currency;
  }

  public void setCurrency(GetRecurringDepositAccountsAccountChartCurrency currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecurringDepositAccountsChartSlabs getRecurringDepositAccountsChartSlabs = (GetRecurringDepositAccountsChartSlabs) o;
    return Objects.equals(this.id, getRecurringDepositAccountsChartSlabs.id) &&
        Objects.equals(this.periodType, getRecurringDepositAccountsChartSlabs.periodType) &&
        Objects.equals(this.fromPeriod, getRecurringDepositAccountsChartSlabs.fromPeriod) &&
        Objects.equals(this.toPeriod, getRecurringDepositAccountsChartSlabs.toPeriod) &&
        Objects.equals(this.annualInterestRate, getRecurringDepositAccountsChartSlabs.annualInterestRate) &&
        Objects.equals(this.currency, getRecurringDepositAccountsChartSlabs.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, periodType, fromPeriod, toPeriod, annualInterestRate, currency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecurringDepositAccountsChartSlabs {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    fromPeriod: ").append(toIndentedString(fromPeriod)).append("\n");
    sb.append("    toPeriod: ").append(toIndentedString(toPeriod)).append("\n");
    sb.append("    annualInterestRate: ").append(toIndentedString(annualInterestRate)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
