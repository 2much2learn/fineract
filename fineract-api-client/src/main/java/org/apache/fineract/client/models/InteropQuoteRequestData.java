/*
 * Apache Fineract
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.3.0-806-gcdf3c76-dirty
 * Contact: dev@fineract.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.apache.fineract.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.apache.fineract.client.models.ExtensionData;
import org.apache.fineract.client.models.GeoCodeData;
import org.apache.fineract.client.models.InteropTransactionTypeData;
import org.apache.fineract.client.models.MoneyData;
/**
 * InteropQuoteRequestData
 */


public class InteropQuoteRequestData {
  @SerializedName("transactionCode")
  private String transactionCode = null;

  @SerializedName("requestCode")
  private String requestCode = null;

  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("amount")
  private MoneyData amount = null;

  /**
   * Gets or Sets transactionRole
   */
  @JsonAdapter(TransactionRoleEnum.Adapter.class)
  public enum TransactionRoleEnum {
    PAYER("PAYER"),
    PAYEE("PAYEE");

    private String value;

    TransactionRoleEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransactionRoleEnum fromValue(String text) {
      for (TransactionRoleEnum b : TransactionRoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransactionRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionRoleEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("transactionRole")
  private TransactionRoleEnum transactionRole = null;

  @SerializedName("transactionType")
  private InteropTransactionTypeData transactionType = null;

  @SerializedName("note")
  private String note = null;

  @SerializedName("geoCode")
  private GeoCodeData geoCode = null;

  @SerializedName("expiration")
  private OffsetDateTime expiration = null;

  @SerializedName("extensionList")
  private List<ExtensionData> extensionList = null;

  @SerializedName("quoteCode")
  private String quoteCode = null;

  /**
   * Gets or Sets amountType
   */
  @JsonAdapter(AmountTypeEnum.Adapter.class)
  public enum AmountTypeEnum {
    SEND("SEND"),
    RECEIVE("RECEIVE");

    private String value;

    AmountTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AmountTypeEnum fromValue(String text) {
      for (AmountTypeEnum b : AmountTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AmountTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("amountType")
  private AmountTypeEnum amountType = null;

  @SerializedName("fees")
  private MoneyData fees = null;

  @SerializedName("expirationLocalDate")
  private LocalDate expirationLocalDate = null;

  public InteropQuoteRequestData transactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
    return this;
  }

   /**
   * Get transactionCode
   * @return transactionCode
  **/
  @Schema(required = true, description = "")
  public String getTransactionCode() {
    return transactionCode;
  }

  public void setTransactionCode(String transactionCode) {
    this.transactionCode = transactionCode;
  }

  public InteropQuoteRequestData requestCode(String requestCode) {
    this.requestCode = requestCode;
    return this;
  }

   /**
   * Get requestCode
   * @return requestCode
  **/
  @Schema(description = "")
  public String getRequestCode() {
    return requestCode;
  }

  public void setRequestCode(String requestCode) {
    this.requestCode = requestCode;
  }

  public InteropQuoteRequestData accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @Schema(required = true, description = "")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public InteropQuoteRequestData amount(MoneyData amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(required = true, description = "")
  public MoneyData getAmount() {
    return amount;
  }

  public void setAmount(MoneyData amount) {
    this.amount = amount;
  }

  public InteropQuoteRequestData transactionRole(TransactionRoleEnum transactionRole) {
    this.transactionRole = transactionRole;
    return this;
  }

   /**
   * Get transactionRole
   * @return transactionRole
  **/
  @Schema(required = true, description = "")
  public TransactionRoleEnum getTransactionRole() {
    return transactionRole;
  }

  public void setTransactionRole(TransactionRoleEnum transactionRole) {
    this.transactionRole = transactionRole;
  }

  public InteropQuoteRequestData transactionType(InteropTransactionTypeData transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @Schema(description = "")
  public InteropTransactionTypeData getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(InteropTransactionTypeData transactionType) {
    this.transactionType = transactionType;
  }

  public InteropQuoteRequestData note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @Schema(description = "")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public InteropQuoteRequestData geoCode(GeoCodeData geoCode) {
    this.geoCode = geoCode;
    return this;
  }

   /**
   * Get geoCode
   * @return geoCode
  **/
  @Schema(description = "")
  public GeoCodeData getGeoCode() {
    return geoCode;
  }

  public void setGeoCode(GeoCodeData geoCode) {
    this.geoCode = geoCode;
  }

  public InteropQuoteRequestData expiration(OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Get expiration
   * @return expiration
  **/
  @Schema(description = "")
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(OffsetDateTime expiration) {
    this.expiration = expiration;
  }

  public InteropQuoteRequestData extensionList(List<ExtensionData> extensionList) {
    this.extensionList = extensionList;
    return this;
  }

  public InteropQuoteRequestData addExtensionListItem(ExtensionData extensionListItem) {
    if (this.extensionList == null) {
      this.extensionList = new ArrayList<>();
    }
    this.extensionList.add(extensionListItem);
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  @Schema(description = "")
  public List<ExtensionData> getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(List<ExtensionData> extensionList) {
    this.extensionList = extensionList;
  }

  public InteropQuoteRequestData quoteCode(String quoteCode) {
    this.quoteCode = quoteCode;
    return this;
  }

   /**
   * Get quoteCode
   * @return quoteCode
  **/
  @Schema(required = true, description = "")
  public String getQuoteCode() {
    return quoteCode;
  }

  public void setQuoteCode(String quoteCode) {
    this.quoteCode = quoteCode;
  }

  public InteropQuoteRequestData amountType(AmountTypeEnum amountType) {
    this.amountType = amountType;
    return this;
  }

   /**
   * Get amountType
   * @return amountType
  **/
  @Schema(required = true, description = "")
  public AmountTypeEnum getAmountType() {
    return amountType;
  }

  public void setAmountType(AmountTypeEnum amountType) {
    this.amountType = amountType;
  }

  public InteropQuoteRequestData fees(MoneyData fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  @Schema(description = "")
  public MoneyData getFees() {
    return fees;
  }

  public void setFees(MoneyData fees) {
    this.fees = fees;
  }

  public InteropQuoteRequestData expirationLocalDate(LocalDate expirationLocalDate) {
    this.expirationLocalDate = expirationLocalDate;
    return this;
  }

   /**
   * Get expirationLocalDate
   * @return expirationLocalDate
  **/
  @Schema(description = "")
  public LocalDate getExpirationLocalDate() {
    return expirationLocalDate;
  }

  public void setExpirationLocalDate(LocalDate expirationLocalDate) {
    this.expirationLocalDate = expirationLocalDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InteropQuoteRequestData interopQuoteRequestData = (InteropQuoteRequestData) o;
    return Objects.equals(this.transactionCode, interopQuoteRequestData.transactionCode) &&
        Objects.equals(this.requestCode, interopQuoteRequestData.requestCode) &&
        Objects.equals(this.accountId, interopQuoteRequestData.accountId) &&
        Objects.equals(this.amount, interopQuoteRequestData.amount) &&
        Objects.equals(this.transactionRole, interopQuoteRequestData.transactionRole) &&
        Objects.equals(this.transactionType, interopQuoteRequestData.transactionType) &&
        Objects.equals(this.note, interopQuoteRequestData.note) &&
        Objects.equals(this.geoCode, interopQuoteRequestData.geoCode) &&
        Objects.equals(this.expiration, interopQuoteRequestData.expiration) &&
        Objects.equals(this.extensionList, interopQuoteRequestData.extensionList) &&
        Objects.equals(this.quoteCode, interopQuoteRequestData.quoteCode) &&
        Objects.equals(this.amountType, interopQuoteRequestData.amountType) &&
        Objects.equals(this.fees, interopQuoteRequestData.fees) &&
        Objects.equals(this.expirationLocalDate, interopQuoteRequestData.expirationLocalDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionCode, requestCode, accountId, amount, transactionRole, transactionType, note, geoCode, expiration, extensionList, quoteCode, amountType, fees, expirationLocalDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InteropQuoteRequestData {\n");
    
    sb.append("    transactionCode: ").append(toIndentedString(transactionCode)).append("\n");
    sb.append("    requestCode: ").append(toIndentedString(requestCode)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transactionRole: ").append(toIndentedString(transactionRole)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    geoCode: ").append(toIndentedString(geoCode)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("    quoteCode: ").append(toIndentedString(quoteCode)).append("\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    expirationLocalDate: ").append(toIndentedString(expirationLocalDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
